{"ast":null,"code":"var _jsxFileName = \"/app/src/components/d3component_testfield.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from \"d3\";\nimport * as axios from \"axios\";\nimport log from \"d3-scale/src/log\";\nexport default function D3Test(props) {\n  const d3Container = useRef(null);\n  const width = 900;\n  const height = 300;\n  const marging = {\n    top: 10,\n    left: 30,\n    right: 10,\n    bottom: 20\n  };\n  console.log(width + marging.top);\n  const svg_width = width + marging.left + marging.right;\n  const svg_height = height + marging.bottom + marging.top;\n  useEffect(() => {\n    /* implementation heavily influenced by http://bl.ocks.org/1166403 */\n    async function get_data() {\n      var data = await axios.get(\"http://localhost:5000/sensors_data\").then(response => response.data);\n      var values = [];\n      var values_list = [];\n      var date = [];\n      var size = 0;\n      console.log(data);\n\n      for (var device in data) {\n        // console.log(device)\n        for (var uri in data[device]) {\n          // console.log(uri)\n          values.push({\n            id: uri,\n            values: []\n          });\n\n          for (var sample in data[device][uri]) {\n            values[0][\"values\"].append({\n              value: data[device][uri][sample][0],\n              value_unit: data[device][uri][sample][1],\n              date: new Date(data[device][uri][sample][2])\n            });\n            size = values.push(data[device][uri][sample]);\n            values_list.push(data[device][uri][sample][0]);\n            date.push(data[device][uri][sample][2]);\n          }\n        }\n      } //\n      //             for (var device in data){\n      //     // console.log(device)\n      //     for (var uri in data[device]){\n      //         // console.log(uri)\n      //         for (var sample in data[device][uri]){\n      //             // console.log(sample)\n      //             // console.log(data[device][uri][sample])\n      //             size = values.push(data[device][uri][sample])\n      //             values_list.push(data[device][uri][sample][0])\n      //             date.push(data[device][uri][sample][2])\n      //         }\n      //     }\n      // }\n      // var val_min = val_extr[0]\n      // var data = [{val_min:50, val_max:51},{ date: 1514764887.237, value: 51, value_unit: \"%r.H.\" },{ date: 1514778837.129, value: 50.1, value_unit: \"%r.H.\" },{ date: 1514788837.129, value: 50, value_unit: \"%r.H.\" }]\n      // var date = [1514764887.237,1514788837.129]\n\n\n      var data = values;\n      console.log(values);\n      var date = values.shift();\n      var date_extr = d3.extent(date); // const first_key = Object.keys(data)[0]\n      // var val_extr_dict = data[first_key][\"values\"].shift()\n\n      var val_extr_dict = data.shift();\n      var val_extr = [val_extr_dict.val_min, val_extr_dict.val_max]; // console.log(\"coucou\")\n      // console.log(new Date(data[first_key][\"values\"][data[first_key][\"values\"].length - 1][2] * 1000))\n      // var date_deb = new Date(data[first_key][\"values\"][0][\"date\"] * 1000)\n      // var date_fin = new Date(data[first_key][\"values\"][data[first_key][\"values\"].length - 1][\"date\"] * 1000)\n\n      var date_deb = new Date(1514764887.237 * 1000);\n      var date_fin = new Date(1514788837.129 * 1000);\n      console.log(date_fin, date_deb);\n      console.log(val_extr);\n      console.log(data); // var val_max = val_extr[1]\n      // console.log(val_extr)\n      // define dimensions of graph\n      // create a simple data array that we'll plot with a line (this array represents only the Y values, X will just be the index location)\n\n      var m = [0, 0, 0, 80]; // margins\n      // var w = 1000 - m[1] - m[3]; // width\n      // var h = 400 - m[0] - m[2]; // height\n      // var data = [3, 6, 2, 7, 5, 2, 0, 3, 8, 9, 2, 5, 9, 3, 6, 3, 6, 2, 7, 5, 2, 1, 3, 8, 9, 2, 5, 9, 2, 7];\n      // X scale will fit all values from data[] within pixels 0-w\n\n      var x = d3.scaleLinear().domain([0, data.length]).range([0, width]); // Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)\n\n      var y = d3.scaleLinear().domain([0, 10]).range([height, 0]); // automatically determining max range can work something like this\n      // var y = d3.scale.linear().domain([0, d3.max(data)]).range([h, 0]);\n      // create yAxis\n      // var xAxis = d3.axisBottom().scale(x).tickSize(-h)\n\n      var y_scale = d3.scaleLinear().domain(val_extr).nice().range([marging[\"top\"], height - (marging.bottom + marging.top)]);\n      var y_axis = d3.axisRight().scale(y_scale).ticks().tickSize(width);\n      var x_scale = d3.scaleTime().domain([date_deb, date_fin]).nice().range([marging[\"left\"], width - marging[\"right\"]]);\n      var x_axis = d3.axisBottom().scale(x_scale); // Add the x-axis.\n      // create a line function that can convert data[] into x and y points\n\n      var line = d3.line() // assign the X function to plot our line as we wish\n      .x(function (d, i) {\n        // verbose logging to show what's actually being done\n        console.log('Plotting X value for data point: ' + new Date(d.date * 1000) + ' using index: ' + i + ' to be at: ' + x_scale(new Date(d.date * 1000)) + ' using our xScale.'); // return the X coordinate where we want to plot this datapoint\n\n        return x_scale(new Date(d.date * 1000));\n      }).y(function (d) {\n        // verbose logging to show what's actually being done\n        console.log('Plotting Y value for data point: ' + d.value + ' to be at: ' + y_scale(d.value) + \" using our yScale.\"); // return the Y coordinate where we want to plot this datapoint\n\n        return y_scale(d.value);\n      });\n      const svg = d3.select(d3Container.current).append(\"svg\") // Add an SVG element with the desired dimensions and margin.\n      .attr(\"width\", width + m[1] + m[3]).attr(\"height\", height + m[0] + m[2]).append(\"svg:g\").attr(\"transform\", \"translate(\" + m[3] + \",\" + m[0] + \")\");\n      svg.append(\"svg:g\").attr(\"transform\", `translate(${marging.left},${height - marging.bottom})`).attr(\"class\", \"x_axis\").call(x_axis); // create left yAxis\n      // var yAxisLeft = d3.axisLeft().scale(y).ticks(4)\n      // Add the y-axis to the left\n\n      svg.append(\"svg:g\").attr(\"class\", \"y_axis\").attr(\"stroke-opacity\", 0.5).attr(\"stroke-dasharray\", \"2,2\") // .attr(\"transform\", `translate(${marging.left},${marging.top})`)\n      .call(y_axis);\n      svg.selectAll(\".y_axis .tick text\").attr(\"transform\", `translate(-25,10)`);\n      svg.selectAll(\".x_axis .tick text\").attr(\"transform\", `translate(0,10)`);\n      svg.selectAll(\".tick text\").attr(\"x\", 4).attr(\"dy\", -4); // Add the line by appending an svg:path element with the data line we created above\n      // do this AFTER the axes above so that the line is above the tick-lines\n\n      svg.append(\"svg:path\").attr(\"d\", line(data)).attr(\"fill\", \"none\").attr(\"stroke\", \"black\");\n    }\n\n    get_data();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    width: svg_width,\n    height: svg_height,\n    className: \"d3_test\",\n    ref: d3Container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 12\n    }\n  });\n} //\n//\n//\n//\n//\n// export default function D3Test(props){\n//     const d3Container = useRef(null);\n//\n//     const width = 900\n//     const height = 300\n//     const marging = {top:10, left:30, right:10,bottom:20}\n//     console.log(width + marging.top)\n//     const svg_width = width + marging.left + marging.right\n//     const svg_height = height + marging.bottom + marging.top\n//\n//     useEffect(()=>{\n//         async function get_data() {\n//             var data = await axios.get(\"http://localhost:5000/sensors_data\").then(response => response.data)\n//\n//\n//\n//\n//             var values = []\n//             var values_list = []\n//             var date = []\n//             var size = 0\n//\n//             console.log(data)\n//             // for (var device in data) {\n//             //     // console.log(device)\n//             //     for (var uri in data[device]) {\n//             //         // console.log(uri)\n//             //         values.push({id:uri, values:[]})\n//             //         for (var sample in data[device][uri]) {\n//             //             values[0][\"values\"].append({\n//             //\n//             //                 value :data[device][uri][sample][0],\n//             //                 value_unit : data[device][uri][sample][1],\n//             //                 date: new Date(data[device][uri][sample][2])\n//             //\n//             //             })\n//             //             size = values.push(data[device][uri][sample])\n//             //             values_list.push(data[device][uri][sample][0])\n//             //             date.push(data[device][uri][sample][2])\n//             //\n//             //         }\n//             //     }\n//             // }\n//             //\n//             //             for (var device in data){\n//             //     // console.log(device)\n//             //     for (var uri in data[device]){\n//             //         // console.log(uri)\n//             //         for (var sample in data[device][uri]){\n//             //             // console.log(sample)\n//             //             // console.log(data[device][uri][sample])\n//             //             size = values.push(data[device][uri][sample])\n//             //             values_list.push(data[device][uri][sample][0])\n//             //             date.push(data[device][uri][sample][2])\n//             //         }\n//             //     }\n//             // }\n//\n//             var date_extr = d3.extent(date)\n//             const first_key = Object.keys(data)[0]\n//\n//             var val_extr_dict = data[first_key][\"values\"].shift()\n//             var val_extr = [val_extr_dict.val_min, val_extr_dict.val_max]\n//             console.log(\"coucou\")\n//             console.log(new Date(data[first_key][\"values\"][data[first_key][\"values\"].length-1][2]*1000))\n//             var date_deb = new Date(data[first_key][\"values\"][0][\"date\"]*1000)\n//             var date_fin = new Date(data[first_key][\"values\"][data[first_key][\"values\"].length-1][\"date\"]*1000)\n//             console.log(date_fin,date_deb)\n//             console.log(val_extr)\n//             console.log(data)\n//             // var val_min = val_extr[0]\n//             // var val_max = val_extr[1]\n//             // console.log(val_extr)\n//             const svg = d3.select(d3Container.current).attr(\"viewbox\",[0, 0, width- (marging.right + marging.left), height-(marging.bottom + marging.top)]).attr(\"width\",width).attr(\"height\",height)\n//\n//             var y_scale = d3.scaleLinear().domain(val_extr).nice().range([marging[\"top\"],height-(marging.bottom + marging.top)])\n//\n//             var y_axis = d3.axisRight().scale(y_scale).ticks(15).tickSize(width)\n//\n//             var x_scale = d3.scaleTime().domain([date_deb,date_fin]).nice().range([marging[\"left\"], width-marging[\"right\"]])\n//\n//             var x_axis = d3.axisBottom().scale(x_scale)\n//\n//             // svg.selectAll(\"circle\").data(y_scale.ticks())\n//             //     .join(\"line\")\n//             //     .attr(\"x1\",150)\n//             //     .attr(\"x2\",250)\n//             //     .attr(\"y1\",d=>y_scale(d))\n//             //     .attr(\"y2\",d=>y_scale(d))\n//             //     .attr(\"stroke\",\"black\")\n//\n//             svg.append(\"g\")\n//                 .attr(\"class\",\"y_axis\")\n//                 .attr(\"stroke-opacity\",0.5)\n//                 .attr(\"stroke-dasharray\",\"2,2\")\n//                 .attr(\"transform\",`translate(${marging.left},${marging.top})`).call(y_axis)\n//             svg.append(\"g\")\n//                 .attr(\"transform\", `translate(${marging.left},${height - marging.bottom})`)\n//                 .attr(\"class\",\"x_axis\")\n//                 .call(x_axis)\n//             svg.selectAll(\".tick text\")\n//                 .attr(\"x\", 4).attr(\"dy\", -4);\n//             svg.selectAll(\".y_axis .tick text\").attr(\"transform\",`translate(-25,10)`)\n//             svg.selectAll(\".x_axis .tick text\").attr(\"transform\",`translate(0,10)`)\n//\n//             // console.log(dict_data)\n//             const line = d3.line().x(function (d){return x_scale(d[\"date\"])}).y(function (d){return y_scale(d[\"value\"])})\n//             console.log()\n//             svg.selectAll(\"lines\").data([data[first_key].values]).enter().append(\"path\").attr(\"d\",line).attr(\"stroke\",\"black\")\n//                 // .append(\"g\").append(\"path\").attr(\"d\", function(d){return line(d.values)}).attr(\"stroke\",\"black\")\n//\n//         }\n//         get_data()\n//     }, [])\n//\n//     return <svg width={svg_width} height={svg_height}\n//         className=\"d3_test\"\n//\n//         ref={d3Container}\n//     />\n// }","map":{"version":3,"sources":["/app/src/components/d3component_testfield.js"],"names":["React","useEffect","useRef","useState","d3","axios","log","D3Test","props","d3Container","width","height","marging","top","left","right","bottom","console","svg_width","svg_height","get_data","data","get","then","response","values","values_list","date","size","device","uri","push","id","sample","append","value","value_unit","Date","shift","date_extr","extent","val_extr_dict","val_extr","val_min","val_max","date_deb","date_fin","m","x","scaleLinear","domain","length","range","y","y_scale","nice","y_axis","axisRight","scale","ticks","tickSize","x_scale","scaleTime","x_axis","axisBottom","line","d","i","svg","select","current","attr","call","selectAll"],"mappings":"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MAAM,GAAGC,OAAO,CAACI,MAAO,GAD5E,EAEKuD,IAFL,CAEU,OAFV,EAEmB,QAFnB,EAGKC,IAHL,CAGUT,MAHV,EArHsB,CA2HtB;AACA;AACA;;AACAK,MAAAA,GAAG,CAAClC,MAAJ,CAAW,OAAX,EACKqC,IADL,CACU,OADV,EACmB,QADnB,EAEKA,IAFL,CAEU,gBAFV,EAE4B,GAF5B,EAGKA,IAHL,CAGU,kBAHV,EAG8B,KAH9B,EAII;AAJJ,OAKKC,IALL,CAKUhB,MALV;AAMAY,MAAAA,GAAG,CAACK,SAAJ,CAAc,oBAAd,EAAoCF,IAApC,CAAyC,WAAzC,EAAuD,mBAAvD;AACAH,MAAAA,GAAG,CAACK,SAAJ,CAAc,oBAAd,EAAoCF,IAApC,CAAyC,WAAzC,EAAuD,iBAAvD;AAEAH,MAAAA,GAAG,CAACK,SAAJ,CAAc,YAAd,EACKF,IADL,CACU,GADV,EACe,CADf,EACkBA,IADlB,CACuB,IADvB,EAC6B,CAAC,CAD9B,EAvIsB,CA0ItB;AACA;;AACAH,MAAAA,GAAG,CAAClC,MAAJ,CAAW,UAAX,EAAuBqC,IAAvB,CAA4B,GAA5B,EAAiCN,IAAI,CAAC5C,IAAD,CAArC,EAA6CkD,IAA7C,CAAkD,MAAlD,EAAyD,MAAzD,EAAiEA,IAAjE,CAAsE,QAAtE,EAA+E,OAA/E;AACH;;AACDnD,IAAAA,QAAQ;AACX,GAjJQ,EAiJN,EAjJM,CAAT;AAmJA,sBAAO;AAAK,IAAA,KAAK,EAAEF,SAAZ;AAAuB,IAAA,MAAM,EAAEC,UAA/B;AACK,IAAA,SAAS,EAAC,SADf;AAGK,IAAA,GAAG,EAAEV,WAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAKH,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport * as d3 from \"d3\";\nimport * as axios from \"axios\";\nimport log from \"d3-scale/src/log\";\n\n\n\n\n\n\nexport default function D3Test(props){\n    const d3Container = useRef(null);\n\n    const width = 900\n    const height = 300\n    const marging = {top:10, left:30, right:10,bottom:20}\n    console.log(width + marging.top)\n    const svg_width = width + marging.left + marging.right\n    const svg_height = height + marging.bottom + marging.top\n\n    useEffect(()=>{\n        /* implementation heavily influenced by http://bl.ocks.org/1166403 */\n        async function get_data() {\n            var data = await axios.get(\"http://localhost:5000/sensors_data\").then(response => response.data)\n\n\n            var values = []\n            var values_list = []\n            var date = []\n            var size = 0\n\n            console.log(data)\n            for (var device in data) {\n                // console.log(device)\n                for (var uri in data[device]) {\n                    // console.log(uri)\n                    values.push({id:uri, values:[]})\n                    for (var sample in data[device][uri]) {\n                        values[0][\"values\"].append({\n\n                            value :data[device][uri][sample][0],\n                            value_unit : data[device][uri][sample][1],\n                            date: new Date(data[device][uri][sample][2])\n\n                        })\n                        size = values.push(data[device][uri][sample])\n                        values_list.push(data[device][uri][sample][0])\n                        date.push(data[device][uri][sample][2])\n\n                    }\n                }\n            }\n            //\n            //             for (var device in data){\n            //     // console.log(device)\n            //     for (var uri in data[device]){\n            //         // console.log(uri)\n            //         for (var sample in data[device][uri]){\n            //             // console.log(sample)\n            //             // console.log(data[device][uri][sample])\n            //             size = values.push(data[device][uri][sample])\n            //             values_list.push(data[device][uri][sample][0])\n            //             date.push(data[device][uri][sample][2])\n            //         }\n            //     }\n            // }\n\n            // var val_min = val_extr[0]\n            // var data = [{val_min:50, val_max:51},{ date: 1514764887.237, value: 51, value_unit: \"%r.H.\" },{ date: 1514778837.129, value: 50.1, value_unit: \"%r.H.\" },{ date: 1514788837.129, value: 50, value_unit: \"%r.H.\" }]\n            // var date = [1514764887.237,1514788837.129]\n            var data = values\n            console.log(values)\n            var date = values.shift()\n            var date_extr = d3.extent(date)\n\n            // const first_key = Object.keys(data)[0]\n            // var val_extr_dict = data[first_key][\"values\"].shift()\n            var val_extr_dict = data.shift()\n            var val_extr = [val_extr_dict.val_min, val_extr_dict.val_max]\n            // console.log(\"coucou\")\n            // console.log(new Date(data[first_key][\"values\"][data[first_key][\"values\"].length - 1][2] * 1000))\n            // var date_deb = new Date(data[first_key][\"values\"][0][\"date\"] * 1000)\n            // var date_fin = new Date(data[first_key][\"values\"][data[first_key][\"values\"].length - 1][\"date\"] * 1000)\n            var date_deb = new Date( 1514764887.237* 1000)\n            var date_fin = new Date( 1514788837.129 * 1000)\n            console.log(date_fin, date_deb)\n            console.log(val_extr)\n            console.log(data)\n            // var val_max = val_extr[1]\n            // console.log(val_extr)\n            // define dimensions of graph\n            // create a simple data array that we'll plot with a line (this array represents only the Y values, X will just be the index location)\n\n            var m = [0, 0, 0, 80]; // margins\n            // var w = 1000 - m[1] - m[3]; // width\n            // var h = 400 - m[0] - m[2]; // height\n            // var data = [3, 6, 2, 7, 5, 2, 0, 3, 8, 9, 2, 5, 9, 3, 6, 3, 6, 2, 7, 5, 2, 1, 3, 8, 9, 2, 5, 9, 2, 7];\n\n            // X scale will fit all values from data[] within pixels 0-w\n            var x = d3.scaleLinear().domain([0, data.length]).range([0, width]);\n            // Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)\n            var y = d3.scaleLinear().domain([0, 10]).range([height, 0]);\n            // automatically determining max range can work something like this\n            // var y = d3.scale.linear().domain([0, d3.max(data)]).range([h, 0]);\n\n            // create yAxis\n            // var xAxis = d3.axisBottom().scale(x).tickSize(-h)\n            var y_scale = d3.scaleLinear().domain(val_extr).nice().range([marging[\"top\"], height - (marging.bottom + marging.top)])\n\n            var y_axis = d3.axisRight().scale(y_scale).ticks().tickSize(width)\n\n            var x_scale = d3.scaleTime().domain([date_deb, date_fin]).nice().range([marging[\"left\"], width - marging[\"right\"]])\n\n            var x_axis = d3.axisBottom().scale(x_scale)\n            // Add the x-axis.\n            // create a line function that can convert data[] into x and y points\n            var line = d3.line()\n                // assign the X function to plot our line as we wish\n                .x(function (d, i) {\n                    // verbose logging to show what's actually being done\n                    console.log('Plotting X value for data point: ' + new Date(d.date*1000) + ' using index: ' + i + ' to be at: ' + x_scale( new Date(d.date*1000)) + ' using our xScale.');\n                    // return the X coordinate where we want to plot this datapoint\n                    return x_scale(new Date(d.date *1000));\n                })\n                .y(function (d) {\n                    // verbose logging to show what's actually being done\n                    console.log('Plotting Y value for data point: ' + d.value + ' to be at: ' + y_scale(d.value) + \" using our yScale.\");\n                    // return the Y coordinate where we want to plot this datapoint\n                    return y_scale(d.value);\n                })\n            const svg = d3.select(d3Container.current).append(\"svg\")\n                // Add an SVG element with the desired dimensions and margin.\n                .attr(\"width\", width + m[1] + m[3])\n                .attr(\"height\", height + m[0] + m[2])\n                .append(\"svg:g\")\n                .attr(\"transform\", \"translate(\" + m[3] + \",\" + m[0] + \")\");\n\n\n\n            svg.append(\"svg:g\")\n                .attr(\"transform\", `translate(${marging.left},${height - marging.bottom})`)\n                .attr(\"class\", \"x_axis\")\n                .call(x_axis);\n\n\n            // create left yAxis\n            // var yAxisLeft = d3.axisLeft().scale(y).ticks(4)\n            // Add the y-axis to the left\n            svg.append(\"svg:g\")\n                .attr(\"class\", \"y_axis\")\n                .attr(\"stroke-opacity\", 0.5)\n                .attr(\"stroke-dasharray\", \"2,2\")\n                // .attr(\"transform\", `translate(${marging.left},${marging.top})`)\n                .call(y_axis)\n            svg.selectAll(\".y_axis .tick text\").attr(\"transform\", `translate(-25,10)`)\n            svg.selectAll(\".x_axis .tick text\").attr(\"transform\", `translate(0,10)`)\n\n            svg.selectAll(\".tick text\")\n                .attr(\"x\", 4).attr(\"dy\", -4);\n\n            // Add the line by appending an svg:path element with the data line we created above\n            // do this AFTER the axes above so that the line is above the tick-lines\n            svg.append(\"svg:path\").attr(\"d\", line(data)).attr(\"fill\",\"none\").attr(\"stroke\",\"black\");\n        }\n        get_data()\n    }, [])\n\n    return <svg width={svg_width} height={svg_height}\n                className=\"d3_test\"\n\n                ref={d3Container}\n    />\n}\n//\n//\n//\n//\n//\n// export default function D3Test(props){\n//     const d3Container = useRef(null);\n//\n//     const width = 900\n//     const height = 300\n//     const marging = {top:10, left:30, right:10,bottom:20}\n//     console.log(width + marging.top)\n//     const svg_width = width + marging.left + marging.right\n//     const svg_height = height + marging.bottom + marging.top\n//\n//     useEffect(()=>{\n//         async function get_data() {\n//             var data = await axios.get(\"http://localhost:5000/sensors_data\").then(response => response.data)\n//\n//\n//\n//\n//             var values = []\n//             var values_list = []\n//             var date = []\n//             var size = 0\n//\n//             console.log(data)\n//             // for (var device in data) {\n//             //     // console.log(device)\n//             //     for (var uri in data[device]) {\n//             //         // console.log(uri)\n//             //         values.push({id:uri, values:[]})\n//             //         for (var sample in data[device][uri]) {\n//             //             values[0][\"values\"].append({\n//             //\n//             //                 value :data[device][uri][sample][0],\n//             //                 value_unit : data[device][uri][sample][1],\n//             //                 date: new Date(data[device][uri][sample][2])\n//             //\n//             //             })\n//             //             size = values.push(data[device][uri][sample])\n//             //             values_list.push(data[device][uri][sample][0])\n//             //             date.push(data[device][uri][sample][2])\n//             //\n//             //         }\n//             //     }\n//             // }\n//             //\n//             //             for (var device in data){\n//             //     // console.log(device)\n//             //     for (var uri in data[device]){\n//             //         // console.log(uri)\n//             //         for (var sample in data[device][uri]){\n//             //             // console.log(sample)\n//             //             // console.log(data[device][uri][sample])\n//             //             size = values.push(data[device][uri][sample])\n//             //             values_list.push(data[device][uri][sample][0])\n//             //             date.push(data[device][uri][sample][2])\n//             //         }\n//             //     }\n//             // }\n//\n//             var date_extr = d3.extent(date)\n//             const first_key = Object.keys(data)[0]\n//\n//             var val_extr_dict = data[first_key][\"values\"].shift()\n//             var val_extr = [val_extr_dict.val_min, val_extr_dict.val_max]\n//             console.log(\"coucou\")\n//             console.log(new Date(data[first_key][\"values\"][data[first_key][\"values\"].length-1][2]*1000))\n//             var date_deb = new Date(data[first_key][\"values\"][0][\"date\"]*1000)\n//             var date_fin = new Date(data[first_key][\"values\"][data[first_key][\"values\"].length-1][\"date\"]*1000)\n//             console.log(date_fin,date_deb)\n//             console.log(val_extr)\n//             console.log(data)\n//             // var val_min = val_extr[0]\n//             // var val_max = val_extr[1]\n//             // console.log(val_extr)\n//             const svg = d3.select(d3Container.current).attr(\"viewbox\",[0, 0, width- (marging.right + marging.left), height-(marging.bottom + marging.top)]).attr(\"width\",width).attr(\"height\",height)\n//\n//             var y_scale = d3.scaleLinear().domain(val_extr).nice().range([marging[\"top\"],height-(marging.bottom + marging.top)])\n//\n//             var y_axis = d3.axisRight().scale(y_scale).ticks(15).tickSize(width)\n//\n//             var x_scale = d3.scaleTime().domain([date_deb,date_fin]).nice().range([marging[\"left\"], width-marging[\"right\"]])\n//\n//             var x_axis = d3.axisBottom().scale(x_scale)\n//\n//             // svg.selectAll(\"circle\").data(y_scale.ticks())\n//             //     .join(\"line\")\n//             //     .attr(\"x1\",150)\n//             //     .attr(\"x2\",250)\n//             //     .attr(\"y1\",d=>y_scale(d))\n//             //     .attr(\"y2\",d=>y_scale(d))\n//             //     .attr(\"stroke\",\"black\")\n//\n//             svg.append(\"g\")\n//                 .attr(\"class\",\"y_axis\")\n//                 .attr(\"stroke-opacity\",0.5)\n//                 .attr(\"stroke-dasharray\",\"2,2\")\n//                 .attr(\"transform\",`translate(${marging.left},${marging.top})`).call(y_axis)\n//             svg.append(\"g\")\n//                 .attr(\"transform\", `translate(${marging.left},${height - marging.bottom})`)\n//                 .attr(\"class\",\"x_axis\")\n//                 .call(x_axis)\n//             svg.selectAll(\".tick text\")\n//                 .attr(\"x\", 4).attr(\"dy\", -4);\n//             svg.selectAll(\".y_axis .tick text\").attr(\"transform\",`translate(-25,10)`)\n//             svg.selectAll(\".x_axis .tick text\").attr(\"transform\",`translate(0,10)`)\n//\n//             // console.log(dict_data)\n//             const line = d3.line().x(function (d){return x_scale(d[\"date\"])}).y(function (d){return y_scale(d[\"value\"])})\n//             console.log()\n//             svg.selectAll(\"lines\").data([data[first_key].values]).enter().append(\"path\").attr(\"d\",line).attr(\"stroke\",\"black\")\n//                 // .append(\"g\").append(\"path\").attr(\"d\", function(d){return line(d.values)}).attr(\"stroke\",\"black\")\n//\n//         }\n//         get_data()\n//     }, [])\n//\n//     return <svg width={svg_width} height={svg_height}\n//         className=\"d3_test\"\n//\n//         ref={d3Container}\n//     />\n// }"]},"metadata":{},"sourceType":"module"}