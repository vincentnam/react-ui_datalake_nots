{"ast":null,"code":"var _jsxFileName = \"/app/src/components/d3component_testfield.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from \"d3\";\nimport * as axios from \"axios\";\nimport log from \"d3-scale/src/log\";\nexport default function D3Test(props) {\n  const d3Container = useRef(null);\n  const width = 900;\n  const height = 300;\n  const marging = {\n    top: 10,\n    left: 30,\n    right: 10,\n    bottom: 20\n  };\n  console.log(width + marging.top);\n  const svg_width = width + marging.left + marging.right;\n  const svg_height = height + marging.bottom + marging.top;\n  useEffect(() => {\n    /* implementation heavily influenced by http://bl.ocks.org/1166403 */\n    // define dimensions of graph\n    var m = [80, 80, 80, 80]; // margins\n\n    var w = 1000 - m[1] - m[3]; // width\n\n    var h = 400 - m[0] - m[2]; // height\n    // create a simple data array that we'll plot with a line (this array represents only the Y values, X will just be the index location)\n\n    var data = [3, 6, 2, 7, 5, 2, 0, 3, 8, 9, 2, 5, 9, 3, 6, 3, 6, 2, 7, 5, 2, 1, 3, 8, 9, 2, 5, 9, 2, 7]; // X scale will fit all values from data[] within pixels 0-w\n\n    var x = d3.scaleLinear().domain([0, data.length]).range([0, w]); // Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)\n\n    var y = d3.scaleLinear().domain([0, 10]).range([h, 0]); // automatically determining max range can work something like this\n    // var y = d3.scale.linear().domain([0, d3.max(data)]).range([h, 0]);\n    // create a line function that can convert data[] into x and y points\n\n    var line = d3.line() // assign the X function to plot our line as we wish\n    .x(function (d, i) {\n      // verbose logging to show what's actually being done\n      console.log('Plotting X value for data point: ' + d + ' using index: ' + i + ' to be at: ' + x(i) + ' using our xScale.'); // return the X coordinate where we want to plot this datapoint\n\n      return x(i);\n    }).y(function (d) {\n      // verbose logging to show what's actually being done\n      console.log('Plotting Y value for data point: ' + d + ' to be at: ' + y(d) + \" using our yScale.\"); // return the Y coordinate where we want to plot this datapoint\n\n      return y(d);\n    });\n    const svg = d3.select(d3Container.current).append(\"svg\") // Add an SVG element with the desired dimensions and margin.\n    .attr(\"width\", w + m[1] + m[3]).attr(\"height\", h + m[0] + m[2]).append(\"svg:g\").attr(\"transform\", \"translate(\" + m[3] + \",\" + m[0] + \")\"); // create yAxis\n    // var xAxis = d3.axisBottom().scale(x).tickSize(-h)\n\n    var y_scale = d3.scaleLinear().domain(val_extr).nice().range([marging[\"top\"], height - (marging.bottom + marging.top)]);\n    var y_axis = d3.axisRight().scale(y_scale).ticks(15).tickSize(width);\n    var x_scale = d3.scaleTime().domain([date_deb, date_fin]).nice().range([marging[\"left\"], width - marging[\"right\"]]);\n    var x_axis = d3.axisBottom().scale(x_scale); // Add the x-axis.\n\n    svg.append(\"g\").attr(\"class\", \"y_axis\").attr(\"stroke-opacity\", 0.5).attr(\"stroke-dasharray\", \"2,2\").attr(\"transform\", `translate(${marging.left},${marging.top})`).call(y_axis);\n    svg.append(\"g\").call(x_axis);\n    svg.selectAll(\".tick text\").attr(\"x\", 4).attr(\"dy\", -4);\n    svg.selectAll(\".y_axis .tick text\").attr(\"transform\", `translate(-25,10)`);\n    svg.selectAll(\".x_axis .tick text\").attr(\"transform\", `translate(0,10)`);\n    svg.append(\"svg:g\").attr(\"transform\", `translate(${marging.left},${height - marging.bottom})`).attr(\"class\", \"x_axis\").call(x_axis); // create left yAxis\n    // var yAxisLeft = d3.axisLeft().scale(y).ticks(4)\n    // Add the y-axis to the left\n\n    svg.append(\"svg:g\").attr(\"class\", \"y axis\").attr(\"transform\", \"translate(-25,0)\").call(y_axis); // Add the line by appending an svg:path element with the data line we created above\n    // do this AFTER the axes above so that the line is above the tick-lines\n\n    svg.append(\"svg:path\").attr(\"d\", line(data));\n  }, []);\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    width: svg_width,\n    height: svg_height,\n    className: \"d3_test\",\n    ref: d3Container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 12\n    }\n  });\n} //\n//\n//\n//\n//\n// export default function D3Test(props){\n//     const d3Container = useRef(null);\n//\n//     const width = 900\n//     const height = 300\n//     const marging = {top:10, left:30, right:10,bottom:20}\n//     console.log(width + marging.top)\n//     const svg_width = width + marging.left + marging.right\n//     const svg_height = height + marging.bottom + marging.top\n//\n//     useEffect(()=>{\n//         async function get_data() {\n//             var data = await axios.get(\"http://localhost:5000/sensors_data\").then(response => response.data)\n//\n//\n//\n//\n//             var values = []\n//             var values_list = []\n//             var date = []\n//             var size = 0\n//\n//             console.log(data)\n//             // for (var device in data) {\n//             //     // console.log(device)\n//             //     for (var uri in data[device]) {\n//             //         // console.log(uri)\n//             //         values.push({id:uri, values:[]})\n//             //         for (var sample in data[device][uri]) {\n//             //             values[0][\"values\"].append({\n//             //\n//             //                 value :data[device][uri][sample][0],\n//             //                 value_unit : data[device][uri][sample][1],\n//             //                 date: new Date(data[device][uri][sample][2])\n//             //\n//             //             })\n//             //             size = values.push(data[device][uri][sample])\n//             //             values_list.push(data[device][uri][sample][0])\n//             //             date.push(data[device][uri][sample][2])\n//             //\n//             //         }\n//             //     }\n//             // }\n//             //\n//             //             for (var device in data){\n//             //     // console.log(device)\n//             //     for (var uri in data[device]){\n//             //         // console.log(uri)\n//             //         for (var sample in data[device][uri]){\n//             //             // console.log(sample)\n//             //             // console.log(data[device][uri][sample])\n//             //             size = values.push(data[device][uri][sample])\n//             //             values_list.push(data[device][uri][sample][0])\n//             //             date.push(data[device][uri][sample][2])\n//             //         }\n//             //     }\n//             // }\n//\n//             var date_extr = d3.extent(date)\n//             const first_key = Object.keys(data)[0]\n//\n//             var val_extr_dict = data[first_key][\"values\"].shift()\n//             var val_extr = [val_extr_dict.val_min, val_extr_dict.val_max]\n//             console.log(\"coucou\")\n//             console.log(new Date(data[first_key][\"values\"][data[first_key][\"values\"].length-1][2]*1000))\n//             var date_deb = new Date(data[first_key][\"values\"][0][\"date\"]*1000)\n//             var date_fin = new Date(data[first_key][\"values\"][data[first_key][\"values\"].length-1][\"date\"]*1000)\n//             console.log(date_fin,date_deb)\n//             console.log(val_extr)\n//             console.log(data)\n//             // var val_min = val_extr[0]\n//             // var val_max = val_extr[1]\n//             // console.log(val_extr)\n//             const svg = d3.select(d3Container.current).attr(\"viewbox\",[0, 0, width- (marging.right + marging.left), height-(marging.bottom + marging.top)]).attr(\"width\",width).attr(\"height\",height)\n//\n//             var y_scale = d3.scaleLinear().domain(val_extr).nice().range([marging[\"top\"],height-(marging.bottom + marging.top)])\n//\n//             var y_axis = d3.axisRight().scale(y_scale).ticks(15).tickSize(width)\n//\n//             var x_scale = d3.scaleTime().domain([date_deb,date_fin]).nice().range([marging[\"left\"], width-marging[\"right\"]])\n//\n//             var x_axis = d3.axisBottom().scale(x_scale)\n//\n//             // svg.selectAll(\"circle\").data(y_scale.ticks())\n//             //     .join(\"line\")\n//             //     .attr(\"x1\",150)\n//             //     .attr(\"x2\",250)\n//             //     .attr(\"y1\",d=>y_scale(d))\n//             //     .attr(\"y2\",d=>y_scale(d))\n//             //     .attr(\"stroke\",\"black\")\n//\n//             svg.append(\"g\")\n//                 .attr(\"class\",\"y_axis\")\n//                 .attr(\"stroke-opacity\",0.5)\n//                 .attr(\"stroke-dasharray\",\"2,2\")\n//                 .attr(\"transform\",`translate(${marging.left},${marging.top})`).call(y_axis)\n//             svg.append(\"g\")\n//                 .attr(\"transform\", `translate(${marging.left},${height - marging.bottom})`)\n//                 .attr(\"class\",\"x_axis\")\n//                 .call(x_axis)\n//             svg.selectAll(\".tick text\")\n//                 .attr(\"x\", 4).attr(\"dy\", -4);\n//             svg.selectAll(\".y_axis .tick text\").attr(\"transform\",`translate(-25,10)`)\n//             svg.selectAll(\".x_axis .tick text\").attr(\"transform\",`translate(0,10)`)\n//\n//             // console.log(dict_data)\n//             const line = d3.line().x(function (d){return x_scale(d[\"date\"])}).y(function (d){return y_scale(d[\"value\"])})\n//             console.log()\n//             svg.selectAll(\"lines\").data([data[first_key].values]).enter().append(\"path\").attr(\"d\",line).attr(\"stroke\",\"black\")\n//                 // .append(\"g\").append(\"path\").attr(\"d\", function(d){return line(d.values)}).attr(\"stroke\",\"black\")\n//\n//         }\n//         get_data()\n//     }, [])\n//\n//     return <svg width={svg_width} height={svg_height}\n//         className=\"d3_test\"\n//\n//         ref={d3Container}\n//     />\n// }","map":{"version":3,"sources":["/app/src/components/d3component_testfield.js"],"names":["React","useEffect","useRef","useState","d3","axios","log","D3Test","props","d3Container","width","height","marging","top","left","right","bottom","console","svg_width","svg_height","m","w","h","data","x","scaleLinear","domain","length","range","y","line","d","i","svg","select","current","append","attr","y_scale","val_extr","nice","y_axis","axisRight","scale","ticks","tickSize","x_scale","scaleTime","date_deb","date_fin","x_axis","axisBottom","call","selectAll"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AAOA,eAAe,SAASC,MAAT,CAAgBC,KAAhB,EAAsB;AACjC,QAAMC,WAAW,GAAGP,MAAM,CAAC,IAAD,CAA1B;AAEA,QAAMQ,KAAK,GAAG,GAAd;AACA,QAAMC,MAAM,GAAG,GAAf;AACA,QAAMC,OAAO,GAAG;AAACC,IAAAA,GAAG,EAAC,EAAL;AAASC,IAAAA,IAAI,EAAC,EAAd;AAAkBC,IAAAA,KAAK,EAAC,EAAxB;AAA2BC,IAAAA,MAAM,EAAC;AAAlC,GAAhB;AACAC,EAAAA,OAAO,CAACX,GAAR,CAAYI,KAAK,GAAGE,OAAO,CAACC,GAA5B;AACA,QAAMK,SAAS,GAAGR,KAAK,GAAGE,OAAO,CAACE,IAAhB,GAAuBF,OAAO,CAACG,KAAjD;AACA,QAAMI,UAAU,GAAGR,MAAM,GAAGC,OAAO,CAACI,MAAjB,GAA0BJ,OAAO,CAACC,GAArD;AAEAZ,EAAAA,SAAS,CAAC,MAAI;AACV;AAEA;AACA,QAAImB,CAAC,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,CAAR,CAJU,CAIgB;;AAC1B,QAAIC,CAAC,GAAG,OAAOD,CAAC,CAAC,CAAD,CAAR,GAAcA,CAAC,CAAC,CAAD,CAAvB,CALU,CAKkB;;AAC5B,QAAIE,CAAC,GAAG,MAAMF,CAAC,CAAC,CAAD,CAAP,GAAaA,CAAC,CAAC,CAAD,CAAtB,CANU,CAMiB;AAE3B;;AACA,QAAIG,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,EAAiD,CAAjD,EAAoD,CAApD,EAAuD,CAAvD,EAA0D,CAA1D,EAA6D,CAA7D,EAAgE,CAAhE,EAAmE,CAAnE,EAAsE,CAAtE,EAAyE,CAAzE,EAA4E,CAA5E,EAA+E,CAA/E,EAAkF,CAAlF,EAAqF,CAArF,EAAwF,CAAxF,CAAX,CATU,CAWV;;AACA,QAAIC,CAAC,GAAGpB,EAAE,CAACqB,WAAH,GAAiBC,MAAjB,CAAwB,CAAC,CAAD,EAAIH,IAAI,CAACI,MAAT,CAAxB,EAA0CC,KAA1C,CAAgD,CAAC,CAAD,EAAIP,CAAJ,CAAhD,CAAR,CAZU,CAaV;;AACA,QAAIQ,CAAC,GAAGzB,EAAE,CAACqB,WAAH,GAAiBC,MAAjB,CAAwB,CAAC,CAAD,EAAI,EAAJ,CAAxB,EAAiCE,KAAjC,CAAuC,CAACN,CAAD,EAAI,CAAJ,CAAvC,CAAR,CAdU,CAeV;AACA;AAEA;;AACA,QAAIQ,IAAI,GAAG1B,EAAE,CAAC0B,IAAH,GACP;AADO,KAENN,CAFM,CAEJ,UAASO,CAAT,EAAWC,CAAX,EAAc;AACb;AACAf,MAAAA,OAAO,CAACX,GAAR,CAAY,sCAAsCyB,CAAtC,GAA0C,gBAA1C,GAA6DC,CAA7D,GAAiE,aAAjE,GAAiFR,CAAC,CAACQ,CAAD,CAAlF,GAAwF,oBAApG,EAFa,CAGb;;AACA,aAAOR,CAAC,CAACQ,CAAD,CAAR;AACH,KAPM,EAQNH,CARM,CAQJ,UAASE,CAAT,EAAY;AACX;AACAd,MAAAA,OAAO,CAACX,GAAR,CAAY,sCAAsCyB,CAAtC,GAA0C,aAA1C,GAA0DF,CAAC,CAACE,CAAD,CAA3D,GAAiE,oBAA7E,EAFW,CAGX;;AACA,aAAOF,CAAC,CAACE,CAAD,CAAR;AACH,KAbM,CAAX;AAcA,UAAME,GAAG,GAAG7B,EAAE,CAAC8B,MAAH,CAAUzB,WAAW,CAAC0B,OAAtB,EAA+BC,MAA/B,CAAsC,KAAtC,EACZ;AADY,KAEPC,IAFO,CAEF,OAFE,EAEOhB,CAAC,GAAGD,CAAC,CAAC,CAAD,CAAL,GAAWA,CAAC,CAAC,CAAD,CAFnB,EAGPiB,IAHO,CAGF,QAHE,EAGQf,CAAC,GAAGF,CAAC,CAAC,CAAD,CAAL,GAAWA,CAAC,CAAC,CAAD,CAHpB,EAIPgB,MAJO,CAIA,OAJA,EAKPC,IALO,CAKF,WALE,EAKW,eAAejB,CAAC,CAAC,CAAD,CAAhB,GAAsB,GAAtB,GAA4BA,CAAC,CAAC,CAAD,CAA7B,GAAmC,GAL9C,CAAZ,CAjCU,CAwCV;AACA;;AACA,QAAIkB,OAAO,GAAGlC,EAAE,CAACqB,WAAH,GAAiBC,MAAjB,CAAwBa,QAAxB,EAAkCC,IAAlC,GAAyCZ,KAAzC,CAA+C,CAAChB,OAAO,CAAC,KAAD,CAAR,EAAgBD,MAAM,IAAEC,OAAO,CAACI,MAAR,GAAiBJ,OAAO,CAACC,GAA3B,CAAtB,CAA/C,CAAd;AAEA,QAAI4B,MAAM,GAAGrC,EAAE,CAACsC,SAAH,GAAeC,KAAf,CAAqBL,OAArB,EAA8BM,KAA9B,CAAoC,EAApC,EAAwCC,QAAxC,CAAiDnC,KAAjD,CAAb;AAEA,QAAIoC,OAAO,GAAG1C,EAAE,CAAC2C,SAAH,GAAerB,MAAf,CAAsB,CAACsB,QAAD,EAAUC,QAAV,CAAtB,EAA2CT,IAA3C,GAAkDZ,KAAlD,CAAwD,CAAChB,OAAO,CAAC,MAAD,CAAR,EAAkBF,KAAK,GAACE,OAAO,CAAC,OAAD,CAA/B,CAAxD,CAAd;AAEA,QAAIsC,MAAM,GAAG9C,EAAE,CAAC+C,UAAH,GAAgBR,KAAhB,CAAsBG,OAAtB,CAAb,CAhDU,CAiDV;;AAEIb,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EACKC,IADL,CACU,OADV,EACkB,QADlB,EAEKA,IAFL,CAEU,gBAFV,EAE2B,GAF3B,EAGKA,IAHL,CAGU,kBAHV,EAG6B,KAH7B,EAIKA,IAJL,CAIU,WAJV,EAIuB,aAAYzB,OAAO,CAACE,IAAK,IAAGF,OAAO,CAACC,GAAI,GAJ/D,EAImEuC,IAJnE,CAIwEX,MAJxE;AAKAR,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAEKgB,IAFL,CAEUF,MAFV;AAGAjB,IAAAA,GAAG,CAACoB,SAAJ,CAAc,YAAd,EACKhB,IADL,CACU,GADV,EACe,CADf,EACkBA,IADlB,CACuB,IADvB,EAC6B,CAAC,CAD9B;AAEAJ,IAAAA,GAAG,CAACoB,SAAJ,CAAc,oBAAd,EAAoChB,IAApC,CAAyC,WAAzC,EAAsD,mBAAtD;AACAJ,IAAAA,GAAG,CAACoB,SAAJ,CAAc,oBAAd,EAAoChB,IAApC,CAAyC,WAAzC,EAAsD,iBAAtD;AAGJJ,IAAAA,GAAG,CAACG,MAAJ,CAAW,OAAX,EACKC,IADL,CACU,WADV,EACwB,aAAYzB,OAAO,CAACE,IAAK,IAAGH,MAAM,GAAGC,OAAO,CAACI,MAAO,GAD5E,EAEKqB,IAFL,CAEU,OAFV,EAEkB,QAFlB,EAGKe,IAHL,CAGUF,MAHV,EAjEU,CAuEV;AACA;AACA;;AACAjB,IAAAA,GAAG,CAACG,MAAJ,CAAW,OAAX,EACKC,IADL,CACU,OADV,EACmB,QADnB,EAEKA,IAFL,CAEU,WAFV,EAEuB,kBAFvB,EAGKe,IAHL,CAGUX,MAHV,EA1EU,CA+EV;AACA;;AACAR,IAAAA,GAAG,CAACG,MAAJ,CAAW,UAAX,EAAuBC,IAAvB,CAA4B,GAA5B,EAAiCP,IAAI,CAACP,IAAD,CAArC;AAEH,GAnFQ,EAmFN,EAnFM,CAAT;AAqFA,sBAAO;AAAK,IAAA,KAAK,EAAEL,SAAZ;AAAuB,IAAA,MAAM,EAAEC,UAA/B;AACK,IAAA,SAAS,EAAC,SADf;AAGK,IAAA,GAAG,EAAEV,WAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAKH,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport * as d3 from \"d3\";\nimport * as axios from \"axios\";\nimport log from \"d3-scale/src/log\";\n\n\n\n\n\n\nexport default function D3Test(props){\n    const d3Container = useRef(null);\n\n    const width = 900\n    const height = 300\n    const marging = {top:10, left:30, right:10,bottom:20}\n    console.log(width + marging.top)\n    const svg_width = width + marging.left + marging.right\n    const svg_height = height + marging.bottom + marging.top\n\n    useEffect(()=>{\n        /* implementation heavily influenced by http://bl.ocks.org/1166403 */\n\n        // define dimensions of graph\n        var m = [80, 80, 80, 80]; // margins\n        var w = 1000 - m[1] - m[3]; // width\n        var h = 400 - m[0] - m[2]; // height\n\n        // create a simple data array that we'll plot with a line (this array represents only the Y values, X will just be the index location)\n        var data = [3, 6, 2, 7, 5, 2, 0, 3, 8, 9, 2, 5, 9, 3, 6, 3, 6, 2, 7, 5, 2, 1, 3, 8, 9, 2, 5, 9, 2, 7];\n\n        // X scale will fit all values from data[] within pixels 0-w\n        var x = d3.scaleLinear().domain([0, data.length]).range([0, w]);\n        // Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)\n        var y = d3.scaleLinear().domain([0, 10]).range([h, 0]);\n        // automatically determining max range can work something like this\n        // var y = d3.scale.linear().domain([0, d3.max(data)]).range([h, 0]);\n\n        // create a line function that can convert data[] into x and y points\n        var line = d3.line()\n            // assign the X function to plot our line as we wish\n            .x(function(d,i) {\n                // verbose logging to show what's actually being done\n                console.log('Plotting X value for data point: ' + d + ' using index: ' + i + ' to be at: ' + x(i) + ' using our xScale.');\n                // return the X coordinate where we want to plot this datapoint\n                return x(i);\n            })\n            .y(function(d) {\n                // verbose logging to show what's actually being done\n                console.log('Plotting Y value for data point: ' + d + ' to be at: ' + y(d) + \" using our yScale.\");\n                // return the Y coordinate where we want to plot this datapoint\n                return y(d);\n            })\n        const svg = d3.select(d3Container.current).append(\"svg\")\n        // Add an SVG element with the desired dimensions and margin.\n            .attr(\"width\", w + m[1] + m[3])\n            .attr(\"height\", h + m[0] + m[2])\n            .append(\"svg:g\")\n            .attr(\"transform\", \"translate(\" + m[3] + \",\" + m[0] + \")\");\n\n        // create yAxis\n        // var xAxis = d3.axisBottom().scale(x).tickSize(-h)\n        var y_scale = d3.scaleLinear().domain(val_extr).nice().range([marging[\"top\"],height-(marging.bottom + marging.top)])\n\n        var y_axis = d3.axisRight().scale(y_scale).ticks(15).tickSize(width)\n\n        var x_scale = d3.scaleTime().domain([date_deb,date_fin]).nice().range([marging[\"left\"], width-marging[\"right\"]])\n\n        var x_axis = d3.axisBottom().scale(x_scale)\n        // Add the x-axis.\n\n            svg.append(\"g\")\n                .attr(\"class\",\"y_axis\")\n                .attr(\"stroke-opacity\",0.5)\n                .attr(\"stroke-dasharray\",\"2,2\")\n                .attr(\"transform\",`translate(${marging.left},${marging.top})`).call(y_axis)\n            svg.append(\"g\")\n\n                .call(x_axis)\n            svg.selectAll(\".tick text\")\n                .attr(\"x\", 4).attr(\"dy\", -4);\n            svg.selectAll(\".y_axis .tick text\").attr(\"transform\",`translate(-25,10)`)\n            svg.selectAll(\".x_axis .tick text\").attr(\"transform\",`translate(0,10)`)\n\n\n        svg.append(\"svg:g\")\n            .attr(\"transform\", `translate(${marging.left},${height - marging.bottom})`)\n            .attr(\"class\",\"x_axis\")\n            .call(x_axis);\n\n\n        // create left yAxis\n        // var yAxisLeft = d3.axisLeft().scale(y).ticks(4)\n        // Add the y-axis to the left\n        svg.append(\"svg:g\")\n            .attr(\"class\", \"y axis\")\n            .attr(\"transform\", \"translate(-25,0)\")\n            .call(y_axis);\n\n        // Add the line by appending an svg:path element with the data line we created above\n        // do this AFTER the axes above so that the line is above the tick-lines\n        svg.append(\"svg:path\").attr(\"d\", line(data));\n\n    }, [])\n\n    return <svg width={svg_width} height={svg_height}\n                className=\"d3_test\"\n\n                ref={d3Container}\n    />\n}\n//\n//\n//\n//\n//\n// export default function D3Test(props){\n//     const d3Container = useRef(null);\n//\n//     const width = 900\n//     const height = 300\n//     const marging = {top:10, left:30, right:10,bottom:20}\n//     console.log(width + marging.top)\n//     const svg_width = width + marging.left + marging.right\n//     const svg_height = height + marging.bottom + marging.top\n//\n//     useEffect(()=>{\n//         async function get_data() {\n//             var data = await axios.get(\"http://localhost:5000/sensors_data\").then(response => response.data)\n//\n//\n//\n//\n//             var values = []\n//             var values_list = []\n//             var date = []\n//             var size = 0\n//\n//             console.log(data)\n//             // for (var device in data) {\n//             //     // console.log(device)\n//             //     for (var uri in data[device]) {\n//             //         // console.log(uri)\n//             //         values.push({id:uri, values:[]})\n//             //         for (var sample in data[device][uri]) {\n//             //             values[0][\"values\"].append({\n//             //\n//             //                 value :data[device][uri][sample][0],\n//             //                 value_unit : data[device][uri][sample][1],\n//             //                 date: new Date(data[device][uri][sample][2])\n//             //\n//             //             })\n//             //             size = values.push(data[device][uri][sample])\n//             //             values_list.push(data[device][uri][sample][0])\n//             //             date.push(data[device][uri][sample][2])\n//             //\n//             //         }\n//             //     }\n//             // }\n//             //\n//             //             for (var device in data){\n//             //     // console.log(device)\n//             //     for (var uri in data[device]){\n//             //         // console.log(uri)\n//             //         for (var sample in data[device][uri]){\n//             //             // console.log(sample)\n//             //             // console.log(data[device][uri][sample])\n//             //             size = values.push(data[device][uri][sample])\n//             //             values_list.push(data[device][uri][sample][0])\n//             //             date.push(data[device][uri][sample][2])\n//             //         }\n//             //     }\n//             // }\n//\n//             var date_extr = d3.extent(date)\n//             const first_key = Object.keys(data)[0]\n//\n//             var val_extr_dict = data[first_key][\"values\"].shift()\n//             var val_extr = [val_extr_dict.val_min, val_extr_dict.val_max]\n//             console.log(\"coucou\")\n//             console.log(new Date(data[first_key][\"values\"][data[first_key][\"values\"].length-1][2]*1000))\n//             var date_deb = new Date(data[first_key][\"values\"][0][\"date\"]*1000)\n//             var date_fin = new Date(data[first_key][\"values\"][data[first_key][\"values\"].length-1][\"date\"]*1000)\n//             console.log(date_fin,date_deb)\n//             console.log(val_extr)\n//             console.log(data)\n//             // var val_min = val_extr[0]\n//             // var val_max = val_extr[1]\n//             // console.log(val_extr)\n//             const svg = d3.select(d3Container.current).attr(\"viewbox\",[0, 0, width- (marging.right + marging.left), height-(marging.bottom + marging.top)]).attr(\"width\",width).attr(\"height\",height)\n//\n//             var y_scale = d3.scaleLinear().domain(val_extr).nice().range([marging[\"top\"],height-(marging.bottom + marging.top)])\n//\n//             var y_axis = d3.axisRight().scale(y_scale).ticks(15).tickSize(width)\n//\n//             var x_scale = d3.scaleTime().domain([date_deb,date_fin]).nice().range([marging[\"left\"], width-marging[\"right\"]])\n//\n//             var x_axis = d3.axisBottom().scale(x_scale)\n//\n//             // svg.selectAll(\"circle\").data(y_scale.ticks())\n//             //     .join(\"line\")\n//             //     .attr(\"x1\",150)\n//             //     .attr(\"x2\",250)\n//             //     .attr(\"y1\",d=>y_scale(d))\n//             //     .attr(\"y2\",d=>y_scale(d))\n//             //     .attr(\"stroke\",\"black\")\n//\n//             svg.append(\"g\")\n//                 .attr(\"class\",\"y_axis\")\n//                 .attr(\"stroke-opacity\",0.5)\n//                 .attr(\"stroke-dasharray\",\"2,2\")\n//                 .attr(\"transform\",`translate(${marging.left},${marging.top})`).call(y_axis)\n//             svg.append(\"g\")\n//                 .attr(\"transform\", `translate(${marging.left},${height - marging.bottom})`)\n//                 .attr(\"class\",\"x_axis\")\n//                 .call(x_axis)\n//             svg.selectAll(\".tick text\")\n//                 .attr(\"x\", 4).attr(\"dy\", -4);\n//             svg.selectAll(\".y_axis .tick text\").attr(\"transform\",`translate(-25,10)`)\n//             svg.selectAll(\".x_axis .tick text\").attr(\"transform\",`translate(0,10)`)\n//\n//             // console.log(dict_data)\n//             const line = d3.line().x(function (d){return x_scale(d[\"date\"])}).y(function (d){return y_scale(d[\"value\"])})\n//             console.log()\n//             svg.selectAll(\"lines\").data([data[first_key].values]).enter().append(\"path\").attr(\"d\",line).attr(\"stroke\",\"black\")\n//                 // .append(\"g\").append(\"path\").attr(\"d\", function(d){return line(d.values)}).attr(\"stroke\",\"black\")\n//\n//         }\n//         get_data()\n//     }, [])\n//\n//     return <svg width={svg_width} height={svg_height}\n//         className=\"d3_test\"\n//\n//         ref={d3Container}\n//     />\n// }"]},"metadata":{},"sourceType":"module"}