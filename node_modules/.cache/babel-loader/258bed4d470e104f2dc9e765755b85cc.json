{"ast":null,"code":"var _jsxFileName = \"/app/src/components/d3component_testfield.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from \"d3\";\nexport default function D3Graph(props) {\n  const d3Container = useRef(null);\n  const initialBooks = [{\n    name: \"Harry Potter and the Philosophers Stone\",\n    author: \"J. K. Rowling\",\n    genre: \"fantasy\"\n  }, {\n    name: \"The Pedagogy of Freedom\",\n    author: \"Bell hooks\",\n    genre: \"non-fiction\"\n  }, {\n    name: \"Harry Potter and the Chamber of Secrets\",\n    author: \"J. K. Rowling\",\n    genre: \"fantasy\"\n  }, {\n    name: \"Gilgamesh\",\n    author: \"Derrek Hines\",\n    genre: \"poetry\"\n  }];\n  const [books, setBooks] = useState(initialBooks);\n  useEffect(() => {\n    if (props.data && d3Container.current) {\n      const width = 600;\n      const height = 300;\n      const data = {\n        links: [{\n          source: \"A\",\n          target: \"B\",\n          value: 1\n        }, {\n          source: \"B\",\n          \"target\": \"C\",\n          value: 20\n        }, {\n          source: \"C\",\n          target: \"A\",\n          value: 3\n        }],\n        nodes: [{\n          id: \"A\",\n          group: \"A\"\n        }, {\n          id: \"B\",\n          group: \"B\"\n        }, {\n          id: \"C\",\n          group: \"C\"\n        }]\n      };\n      const svg = d3.select(d3Container.current).append(\"svg\").attr(\"viewBox\", [0, 0, width, height]);\n\n      function color() {}\n\n      ;\n\n      color = () => {\n        const scale = d3.scaleOrdinal(d3.schemeCategory10);\n        return d => scale(d.group);\n      };\n\n      function drag() {}\n\n      ;\n\n      drag = simulation => {\n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.3).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n\n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n\n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n\n        return d3.drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended);\n      };\n\n      svg.style(\"border\", \"1px solid black\"); // Remove old D3 elements\n\n      const links = data.links.map(d => Object.create(d));\n      const nodes = data.nodes.map(d => Object.create(d));\n      const simulation = d3.forceSimulation(nodes).force(\"link\", d3.forceLink(links).id(d => d.id)).force(\"charge\", d3.forceManyBody()).force(\"center\", d3.forceCenter(width / 2, height / 2));\n      const link = svg.append(\"g\").attr(\"stroke\", \"#999\").attr(\"stroke-opacity\", 0.6).selectAll(\"line\").data(links).join(\"line\").attr(\"stroke-width\", d => Math.sqrt(d.value));\n      const node = svg.append(\"g\").attr(\"stroke\", \"#fff\").attr(\"stroke-width\", 1.5).selectAll(\"circle\").data(nodes).join(\"circle\").attr(\"r\", 5).attr(\"fill\", color).call(drag(simulation));\n      node.append(\"title\").text(d => d.id);\n      simulation.on(\"tick\", () => {\n        link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n        node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      }); // invalidation.then(() => simulation.stop());\n\n      svg.exit().remove();\n    }\n  },\n  /*\n      useEffect has a dependency array (below). It's a list of dependency\n      variables for this useEffect block. The block will run after mount\n      and whenever any of these variables change. We still have to check\n      if the variables are valid, but we do not have to compare old props\n      to next props to decide whether to rerender.\n  */\n  [props.data, d3Container.current]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d3-graph\",\n    ref: d3Container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 19\n    }\n  });\n}","map":{"version":3,"sources":["/app/src/components/d3component_testfield.js"],"names":["React","useEffect","useRef","useState","d3","D3Graph","props","d3Container","initialBooks","name","author","genre","books","setBooks","data","current","width","height","links","source","target","value","nodes","id","group","svg","select","append","attr","color","scale","scaleOrdinal","schemeCategory10","d","drag","simulation","dragstarted","event","active","alphaTarget","restart","subject","fx","x","fy","y","dragged","dragended","on","style","map","Object","create","forceSimulation","force","forceLink","forceManyBody","forceCenter","link","selectAll","join","Math","sqrt","node","call","text","exit","remove"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AASA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAuB;AAElC,QAAMC,WAAW,GAAGL,MAAM,CAAC,IAAD,CAA1B;AACA,QAAMM,YAAY,GAAG,CACjB;AACIC,IAAAA,IAAI,EAAE,yCADV;AAEIC,IAAAA,MAAM,EAAE,eAFZ;AAGIC,IAAAA,KAAK,EAAE;AAHX,GADiB,EAKf;AACEF,IAAAA,IAAI,EAAE,yBADR;AAEEC,IAAAA,MAAM,EAAE,YAFV;AAGEC,IAAAA,KAAK,EAAE;AAHT,GALe,EASf;AACEF,IAAAA,IAAI,EAAE,yCADR;AAEEC,IAAAA,MAAM,EAAE,eAFV;AAGEC,IAAAA,KAAK,EAAE;AAHT,GATe,EAaf;AACEF,IAAAA,IAAI,EAAE,WADR;AAEEC,IAAAA,MAAM,EAAE,cAFV;AAGEC,IAAAA,KAAK,EAAE;AAHT,GAbe,CAArB;AAmBA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAACK,YAAD,CAAlC;AAEAP,EAAAA,SAAS,CACL,MAAM;AACF,QAAIK,KAAK,CAACQ,IAAN,IAAcP,WAAW,CAACQ,OAA9B,EAAuC;AACnC,YAAMC,KAAK,GAAG,GAAd;AACA,YAAMC,MAAM,GAAC,GAAb;AACA,YAAMH,IAAI,GAAE;AACRI,QAAAA,KAAK,EAAE,CAAC;AAACC,UAAAA,MAAM,EAAC,GAAR;AAAYC,UAAAA,MAAM,EAAC,GAAnB;AAAuBC,UAAAA,KAAK,EAAC;AAA7B,SAAD,EAAiC;AAACF,UAAAA,MAAM,EAAC,GAAR;AAAY,oBAAS,GAArB;AAAyBE,UAAAA,KAAK,EAAC;AAA/B,SAAjC,EAAoE;AAACF,UAAAA,MAAM,EAAC,GAAR;AAAaC,UAAAA,MAAM,EAAE,GAArB;AAAyBC,UAAAA,KAAK,EAAC;AAA/B,SAApE,CADC;AAERC,QAAAA,KAAK,EAAE,CAAC;AAACC,UAAAA,EAAE,EAAC,GAAJ;AAAQC,UAAAA,KAAK,EAAC;AAAd,SAAD,EAAoB;AAACD,UAAAA,EAAE,EAAC,GAAJ;AAASC,UAAAA,KAAK,EAAC;AAAf,SAApB,EAAwC;AAACD,UAAAA,EAAE,EAAC,GAAJ;AAAQC,UAAAA,KAAK,EAAC;AAAd,SAAxC;AAFC,OAAZ;AAKA,YAAMC,GAAG,GAAGrB,EAAE,CAACsB,MAAH,CAAUnB,WAAW,CAACQ,OAAtB,EAA+BY,MAA/B,CAAsC,KAAtC,EAA6CC,IAA7C,CAAkD,SAAlD,EAA6D,CAAC,CAAD,EAAI,CAAJ,EAAOZ,KAAP,EAAcC,MAAd,CAA7D,CAAZ;;AACA,eAASY,KAAT,GAAgB,CAAE;;AAAA;;AAClBA,MAAAA,KAAK,GAAG,MAAM;AACV,cAAMC,KAAK,GAAG1B,EAAE,CAAC2B,YAAH,CAAgB3B,EAAE,CAAC4B,gBAAnB,CAAd;AACA,eAAOC,CAAC,IAAIH,KAAK,CAACG,CAAC,CAACT,KAAH,CAAjB;AACH,OAHD;;AAIA,eAASU,IAAT,GAAe,CAAE;;AAAA;;AACjBA,MAAAA,IAAI,GAAIC,UAAD,IAAgB;AAEnB,iBAASC,WAAT,CAAqBC,KAArB,EAA4B;AACxB,cAAI,CAACA,KAAK,CAACC,MAAX,EAAmBH,UAAU,CAACI,WAAX,CAAuB,GAAvB,EAA4BC,OAA5B;AACnBH,UAAAA,KAAK,CAACI,OAAN,CAAcC,EAAd,GAAmBL,KAAK,CAACI,OAAN,CAAcE,CAAjC;AACAN,UAAAA,KAAK,CAACI,OAAN,CAAcG,EAAd,GAAmBP,KAAK,CAACI,OAAN,CAAcI,CAAjC;AACH;;AAED,iBAASC,OAAT,CAAiBT,KAAjB,EAAwB;AACpBA,UAAAA,KAAK,CAACI,OAAN,CAAcC,EAAd,GAAmBL,KAAK,CAACM,CAAzB;AACAN,UAAAA,KAAK,CAACI,OAAN,CAAcG,EAAd,GAAmBP,KAAK,CAACQ,CAAzB;AACH;;AAED,iBAASE,SAAT,CAAmBV,KAAnB,EAA0B;AACtB,cAAI,CAACA,KAAK,CAACC,MAAX,EAAmBH,UAAU,CAACI,WAAX,CAAuB,CAAvB;AACnBF,UAAAA,KAAK,CAACI,OAAN,CAAcC,EAAd,GAAmB,IAAnB;AACAL,UAAAA,KAAK,CAACI,OAAN,CAAcG,EAAd,GAAmB,IAAnB;AACH;;AAED,eAAOxC,EAAE,CAAC8B,IAAH,GACFc,EADE,CACC,OADD,EACUZ,WADV,EAEFY,EAFE,CAEC,MAFD,EAESF,OAFT,EAGFE,EAHE,CAGC,KAHD,EAGQD,SAHR,CAAP;AAIH,OAvBD;;AA0BAtB,MAAAA,GAAG,CAACwB,KAAJ,CAAU,QAAV,EAAoB,iBAApB,EAzCmC,CA0CnC;;AACA,YAAM/B,KAAK,GAAGJ,IAAI,CAACI,KAAL,CAAWgC,GAAX,CAAejB,CAAC,IAAIkB,MAAM,CAACC,MAAP,CAAcnB,CAAd,CAApB,CAAd;AACA,YAAMX,KAAK,GAAGR,IAAI,CAACQ,KAAL,CAAW4B,GAAX,CAAejB,CAAC,IAAIkB,MAAM,CAACC,MAAP,CAAcnB,CAAd,CAApB,CAAd;AAEA,YAAME,UAAU,GAAG/B,EAAE,CAACiD,eAAH,CAAmB/B,KAAnB,EACdgC,KADc,CACR,MADQ,EACAlD,EAAE,CAACmD,SAAH,CAAarC,KAAb,EAAoBK,EAApB,CAAuBU,CAAC,IAAIA,CAAC,CAACV,EAA9B,CADA,EAEd+B,KAFc,CAER,QAFQ,EAEElD,EAAE,CAACoD,aAAH,EAFF,EAGdF,KAHc,CAGR,QAHQ,EAGElD,EAAE,CAACqD,WAAH,CAAezC,KAAK,GAAG,CAAvB,EAA0BC,MAAM,GAAG,CAAnC,CAHF,CAAnB;AAOA,YAAMyC,IAAI,GAAGjC,GAAG,CAACE,MAAJ,CAAW,GAAX,EACRC,IADQ,CACH,QADG,EACO,MADP,EAERA,IAFQ,CAEH,gBAFG,EAEe,GAFf,EAGR+B,SAHQ,CAGE,MAHF,EAIR7C,IAJQ,CAIHI,KAJG,EAKR0C,IALQ,CAKH,MALG,EAMRhC,IANQ,CAMH,cANG,EAMaK,CAAC,IAAI4B,IAAI,CAACC,IAAL,CAAU7B,CAAC,CAACZ,KAAZ,CANlB,CAAb;AAQA,YAAM0C,IAAI,GAAGtC,GAAG,CAACE,MAAJ,CAAW,GAAX,EACRC,IADQ,CACH,QADG,EACO,MADP,EAERA,IAFQ,CAEH,cAFG,EAEa,GAFb,EAGR+B,SAHQ,CAGE,QAHF,EAIR7C,IAJQ,CAIHQ,KAJG,EAKRsC,IALQ,CAKH,QALG,EAMRhC,IANQ,CAMH,GANG,EAME,CANF,EAORA,IAPQ,CAOH,MAPG,EAOKC,KAPL,EAQRmC,IARQ,CAQH9B,IAAI,CAACC,UAAD,CARD,CAAb;AAUA4B,MAAAA,IAAI,CAACpC,MAAL,CAAY,OAAZ,EACKsC,IADL,CACUhC,CAAC,IAAIA,CAAC,CAACV,EADjB;AAGAY,MAAAA,UAAU,CAACa,EAAX,CAAc,MAAd,EAAsB,MAAM;AACxBU,QAAAA,IAAI,CACC9B,IADL,CACU,IADV,EACgBK,CAAC,IAAIA,CAAC,CAACd,MAAF,CAASwB,CAD9B,EAEKf,IAFL,CAEU,IAFV,EAEgBK,CAAC,IAAIA,CAAC,CAACd,MAAF,CAAS0B,CAF9B,EAGKjB,IAHL,CAGU,IAHV,EAGgBK,CAAC,IAAIA,CAAC,CAACb,MAAF,CAASuB,CAH9B,EAIKf,IAJL,CAIU,IAJV,EAIgBK,CAAC,IAAIA,CAAC,CAACb,MAAF,CAASyB,CAJ9B;AAMAkB,QAAAA,IAAI,CACCnC,IADL,CACU,IADV,EACgBK,CAAC,IAAIA,CAAC,CAACU,CADvB,EAEKf,IAFL,CAEU,IAFV,EAEgBK,CAAC,IAAIA,CAAC,CAACY,CAFvB;AAGH,OAVD,EA1EmC,CAsFnC;;AAEApB,MAAAA,GAAG,CAACyC,IAAJ,GACKC,MADL;AAEH;AACJ,GA7FI;AA+FL;;;;;;;AAOA,GAAC7D,KAAK,CAACQ,IAAP,EAAaP,WAAW,CAACQ,OAAzB,CAtGK,CAAT;AA6GA,sBAAc;AACV,IAAA,SAAS,EAAC,UADA;AAGV,IAAA,GAAG,EAAER,WAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAd;AAKH","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport * as d3 from \"d3\";\n\n\n\n\n\n\n\n\nexport default function D3Graph(props){\n\n    const d3Container = useRef(null);\n    const initialBooks = [\n        {\n            name: \"Harry Potter and the Philosophers Stone\",\n            author: \"J. K. Rowling\",\n            genre: \"fantasy\"\n        },{\n            name: \"The Pedagogy of Freedom\",\n            author: \"Bell hooks\",\n            genre: \"non-fiction\"\n        },{\n            name: \"Harry Potter and the Chamber of Secrets\",\n            author: \"J. K. Rowling\",\n            genre: \"fantasy\"\n        },{\n            name: \"Gilgamesh\",\n            author: \"Derrek Hines\",\n            genre: \"poetry\"\n        }\n    ]\n    const [books, setBooks] = useState(initialBooks)\n\n    useEffect(\n        () => {\n            if (props.data && d3Container.current) {\n                const width = 600;\n                const height=300;\n                const data ={\n                    links: [{source:\"A\",target:\"B\",value:1},{source:\"B\",\"target\":\"C\",value:20},{source:\"C\", target: \"A\",value:3}],\n                    nodes: [{id:\"A\",group:\"A\"},{id:\"B\", group:\"B\"},{id:\"C\",group:\"C\"}]\n\n                }\n                const svg = d3.select(d3Container.current).append(\"svg\").attr(\"viewBox\", [0, 0, width, height]);\n                function color(){};\n                color = () => {\n                    const scale = d3.scaleOrdinal(d3.schemeCategory10);\n                    return d => scale(d.group);\n                }\n                function drag(){};\n                drag = (simulation) => {\n\n                    function dragstarted(event) {\n                        if (!event.active) simulation.alphaTarget(0.3).restart();\n                        event.subject.fx = event.subject.x;\n                        event.subject.fy = event.subject.y;\n                    }\n\n                    function dragged(event) {\n                        event.subject.fx = event.x;\n                        event.subject.fy = event.y;\n                    }\n\n                    function dragended(event) {\n                        if (!event.active) simulation.alphaTarget(0);\n                        event.subject.fx = null;\n                        event.subject.fy = null;\n                    }\n\n                    return d3.drag()\n                        .on(\"start\", dragstarted)\n                        .on(\"drag\", dragged)\n                        .on(\"end\", dragended);\n                }\n\n\n                svg.style(\"border\", \"1px solid black\")\n                // Remove old D3 elements\n                const links = data.links.map(d => Object.create(d));\n                const nodes = data.nodes.map(d => Object.create(d));\n\n                const simulation = d3.forceSimulation(nodes)\n                    .force(\"link\", d3.forceLink(links).id(d => d.id))\n                    .force(\"charge\", d3.forceManyBody())\n                    .force(\"center\", d3.forceCenter(width / 2, height / 2));\n\n\n\n                const link = svg.append(\"g\")\n                    .attr(\"stroke\", \"#999\")\n                    .attr(\"stroke-opacity\", 0.6)\n                    .selectAll(\"line\")\n                    .data(links)\n                    .join(\"line\")\n                    .attr(\"stroke-width\", d => Math.sqrt(d.value));\n\n                const node = svg.append(\"g\")\n                    .attr(\"stroke\", \"#fff\")\n                    .attr(\"stroke-width\", 1.5)\n                    .selectAll(\"circle\")\n                    .data(nodes)\n                    .join(\"circle\")\n                    .attr(\"r\", 5)\n                    .attr(\"fill\", color)\n                    .call(drag(simulation));\n\n                node.append(\"title\")\n                    .text(d => d.id);\n\n                simulation.on(\"tick\", () => {\n                    link\n                        .attr(\"x1\", d => d.source.x)\n                        .attr(\"y1\", d => d.source.y)\n                        .attr(\"x2\", d => d.target.x)\n                        .attr(\"y2\", d => d.target.y);\n\n                    node\n                        .attr(\"cx\", d => d.x)\n                        .attr(\"cy\", d => d.y);\n                });\n\n                // invalidation.then(() => simulation.stop());\n\n                svg.exit()\n                    .remove();\n            }\n        },\n\n        /*\n            useEffect has a dependency array (below). It's a list of dependency\n            variables for this useEffect block. The block will run after mount\n            and whenever any of these variables change. We still have to check\n            if the variables are valid, but we do not have to compare old props\n            to next props to decide whether to rerender.\n        */\n        [props.data, d3Container.current])\n\n\n\n\n\n\n    return        <div\n        className=\"d3-graph\"\n\n        ref={d3Container}\n    />\n}\n\n"]},"metadata":{},"sourceType":"module"}