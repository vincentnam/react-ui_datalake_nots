{"ast":null,"code":"var _jsxFileName = \"/app/src/components/d3component_testfield.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from \"d3\";\nimport * as axios from \"axios\";\nimport 'react-dropzone-uploader/dist/styles.css';\nimport Dropzone from 'react-dropzone-uploader';\nexport default function D3Test(props) {\n  const d3Container = useRef(null);\n  const [books, setBooks] = useState(initialBooks); // specify upload params and url for your files\n\n  const getUploadParams = ({\n    meta\n  }) => {\n    return {\n      url: 'https://httpbin.org/post'\n    };\n  }; // called every time a file's `status` changes\n\n\n  const handleChangeStatus = ({\n    meta,\n    file\n  }, status) => {\n    console.log(status, meta, file);\n  }; // receives array of files that are done uploading when submit button is clicked\n\n\n  const handleSubmit = (files, allFiles) => {\n    console.log(files.map(f => f.meta));\n    allFiles.forEach(f => f.remove());\n  };\n\n  useEffect(() => {\n    return /*#__PURE__*/React.createElement(Dropzone, {\n      getUploadParams: getUploadParams,\n      onChangeStatus: handleChangeStatus,\n      onSubmit: handleSubmit,\n      accept: \"image/*,audio/*,video/*\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }\n    });\n  },\n  /*\n      useEffect has a dependency array (below). It's a list of dependency\n      variables for this useEffect block. The block will run after mount\n      and whenever any of these variables change. We still have to check\n      if the variables are valid, but we do not have to compare old props\n      to next props to decide whether to rerender.\n  */\n  [props.data, d3Container.current]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d3-graph\",\n    ref: d3Container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 19\n    }\n  });\n}","map":{"version":3,"sources":["/app/src/components/d3component_testfield.js"],"names":["React","useEffect","useRef","useState","d3","axios","Dropzone","D3Test","props","d3Container","books","setBooks","initialBooks","getUploadParams","meta","url","handleChangeStatus","file","status","console","log","handleSubmit","files","allFiles","map","f","forEach","remove","data","current"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAKA,OAAO,yCAAP;AACA,OAAOC,QAAP,MAAqB,yBAArB;AAKA,eAAe,SAASC,MAAT,CAAgBC,KAAhB,EAAsB;AAEjC,QAAMC,WAAW,GAAGP,MAAM,CAAC,IAAD,CAA1B;AAEA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAACS,YAAD,CAAlC,CAJiC,CAKjC;;AACA,QAAMC,eAAe,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAc;AAAE,WAAO;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAAP;AAA4C,GAApF,CANiC,CAQjC;;;AACA,QAAMC,kBAAkB,GAAG,CAAC;AAAEF,IAAAA,IAAF;AAAQG,IAAAA;AAAR,GAAD,EAAiBC,MAAjB,KAA4B;AAAEC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAAoBJ,IAApB,EAA0BG,IAA1B;AAAiC,GAA1F,CATiC,CAWjC;;;AACA,QAAMI,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACtCJ,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAK,CAACE,GAAN,CAAUC,CAAC,IAAIA,CAAC,CAACX,IAAjB,CAAZ;AACAS,IAAAA,QAAQ,CAACG,OAAT,CAAiBD,CAAC,IAAIA,CAAC,CAACE,MAAF,EAAtB;AACH,GAHD;;AAIA1B,EAAAA,SAAS,CACL,MAAM;AACF,wBACI,oBAAC,QAAD;AACI,MAAA,eAAe,EAAEY,eADrB;AAEI,MAAA,cAAc,EAAEG,kBAFpB;AAGI,MAAA,QAAQ,EAAEK,YAHd;AAII,MAAA,MAAM,EAAC,yBAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAQH,GAVI;AAYL;;;;;;;AAOA,GAACb,KAAK,CAACoB,IAAP,EAAanB,WAAW,CAACoB,OAAzB,CAnBK,CAAT;AA0BA,sBAAc;AACV,IAAA,SAAS,EAAC,UADA;AAGV,IAAA,GAAG,EAAEpB,WAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAd;AAKH","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport * as d3 from \"d3\";\nimport * as axios from \"axios\";\n\n\n\n\nimport 'react-dropzone-uploader/dist/styles.css'\nimport Dropzone from 'react-dropzone-uploader'\n\n\n\n\nexport default function D3Test(props){\n\n    const d3Container = useRef(null);\n\n    const [books, setBooks] = useState(initialBooks)\n    // specify upload params and url for your files\n    const getUploadParams = ({ meta }) => { return { url: 'https://httpbin.org/post' } }\n\n    // called every time a file's `status` changes\n    const handleChangeStatus = ({ meta, file }, status) => { console.log(status, meta, file) }\n\n    // receives array of files that are done uploading when submit button is clicked\n    const handleSubmit = (files, allFiles) => {\n        console.log(files.map(f => f.meta))\n        allFiles.forEach(f => f.remove())\n    }\n    useEffect(\n        () => {\n            return (\n                <Dropzone\n                    getUploadParams={getUploadParams}\n                    onChangeStatus={handleChangeStatus}\n                    onSubmit={handleSubmit}\n                    accept=\"image/*,audio/*,video/*\"\n                />\n            )\n        },\n\n        /*\n            useEffect has a dependency array (below). It's a list of dependency\n            variables for this useEffect block. The block will run after mount\n            and whenever any of these variables change. We still have to check\n            if the variables are valid, but we do not have to compare old props\n            to next props to decide whether to rerender.\n        */\n        [props.data, d3Container.current])\n\n\n\n\n\n\n    return        <div\n        className=\"d3-graph\"\n\n        ref={d3Container}\n    />\n}\n\n"]},"metadata":{},"sourceType":"module"}