{"ast":null,"code":"var _jsxFileName = \"/app/src/components/d3component_testfield.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from \"d3\";\nimport * as axios from \"axios\";\nimport log from \"d3-scale/src/log\";\nexport default function D3Test(props) {\n  const d3Container = useRef(null);\n  const width = 900;\n  const height = 300;\n  const marging = {\n    top: 10,\n    left: 30,\n    right: 10,\n    bottom: 20\n  };\n  console.log(width + marging.top);\n  const svg_width = width + marging.left + marging.right;\n  const svg_height = height + marging.bottom + marging.top;\n  useEffect(() => {\n    /* implementation heavily influenced by http://bl.ocks.org/1166403 */\n    async function get_data() {\n      var data = await axios.get(\"http://localhost:5000/sensors_data\").then(response => response.data);\n      var values = [];\n      var values_list = [];\n      var date = [];\n      var size = 0;\n      console.log(data); // for (var device in data) {\n      //     // console.log(device)\n      //     for (var uri in data[device]) {\n      //         // console.log(uri)\n      //         values.push({id:uri, values:[]})\n      //         for (var sample in data[device][uri]) {\n      //             values[0][\"values\"].append({\n      //\n      //                 value :data[device][uri][sample][0],\n      //                 value_unit : data[device][uri][sample][1],\n      //                 date: new Date(data[device][uri][sample][2])\n      //\n      //             })\n      //             size = values.push(data[device][uri][sample])\n      //             values_list.push(data[device][uri][sample][0])\n      //             date.push(data[device][uri][sample][2])\n      //\n      //         }\n      //     }\n      // }\n      //\n      //             for (var device in data){\n      //     // console.log(device)\n      //     for (var uri in data[device]){\n      //         // console.log(uri)\n      //         for (var sample in data[device][uri]){\n      //             // console.log(sample)\n      //             // console.log(data[device][uri][sample])\n      //             size = values.push(data[device][uri][sample])\n      //             values_list.push(data[device][uri][sample][0])\n      //             date.push(data[device][uri][sample][2])\n      //         }\n      //     }\n      // }\n\n      var date_extr = d3.extent(date);\n      const first_key = Object.keys(data)[0];\n      var val_extr_dict = data[first_key][\"values\"].shift();\n      var val_extr = [val_extr_dict.val_min, val_extr_dict.val_max];\n      console.log(\"coucou\");\n      console.log(new Date(data[first_key][\"values\"][data[first_key][\"values\"].length - 1][2] * 1000));\n      var date_deb = new Date(data[first_key][\"values\"][0][\"date\"] * 1000);\n      var date_fin = new Date(data[first_key][\"values\"][data[first_key][\"values\"].length - 1][\"date\"] * 1000);\n      console.log(date_fin, date_deb);\n      console.log(val_extr);\n      console.log(data); // var val_min = val_extr[0]\n      // var val_max = val_extr[1]\n      // console.log(val_extr)\n      // define dimensions of graph\n\n      var m = [80, 80, 80, 80]; // margins\n      // var w = 1000 - m[1] - m[3]; // width\n      // var h = 400 - m[0] - m[2]; // height\n      // create a simple data array that we'll plot with a line (this array represents only the Y values, X will just be the index location)\n\n      var data = [3, 6, 2, 7, 5, 2, 0, 3, 8, 9, 2, 5, 9, 3, 6, 3, 6, 2, 7, 5, 2, 1, 3, 8, 9, 2, 5, 9, 2, 7]; // X scale will fit all values from data[] within pixels 0-w\n\n      var x = d3.scaleLinear().domain([0, data.length]).range([0, width]); // Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)\n\n      var y = d3.scaleLinear().domain([0, 10]).range([height, 0]); // automatically determining max range can work something like this\n      // var y = d3.scale.linear().domain([0, d3.max(data)]).range([h, 0]);\n      // create a line function that can convert data[] into x and y points\n\n      var line = d3.line() // assign the X function to plot our line as we wish\n      .x(function (d, i) {\n        // verbose logging to show what's actually being done\n        console.log('Plotting X value for data point: ' + d + ' using index: ' + i + ' to be at: ' + x(i) + ' using our xScale.'); // return the X coordinate where we want to plot this datapoint\n\n        return x(i);\n      }).y(function (d) {\n        // verbose logging to show what's actually being done\n        console.log('Plotting Y value for data point: ' + d + ' to be at: ' + y(d) + \" using our yScale.\"); // return the Y coordinate where we want to plot this datapoint\n\n        return y(d);\n      });\n      const svg = d3.select(d3Container.current).append(\"svg\") // Add an SVG element with the desired dimensions and margin.\n      .attr(\"width\", w + m[1] + m[3]).attr(\"height\", h + m[0] + m[2]).append(\"svg:g\").attr(\"transform\", \"translate(\" + m[3] + \",\" + m[0] + \")\"); // create yAxis\n      // var xAxis = d3.axisBottom().scale(x).tickSize(-h)\n\n      var y_scale = d3.scaleLinear().domain(val_extr).nice().range([marging[\"top\"], height - (marging.bottom + marging.top)]);\n      var y_axis = d3.axisRight().scale(y_scale).ticks(15).tickSize(width);\n      var x_scale = d3.scaleTime().domain([date_deb, date_fin]).nice().range([marging[\"left\"], width - marging[\"right\"]]);\n      var x_axis = d3.axisBottom().scale(x_scale); // Add the x-axis.\n\n      svg.append(\"svg:g\").attr(\"transform\", `translate(${marging.left},${height - marging.bottom})`).attr(\"class\", \"x_axis\").call(x_axis); // create left yAxis\n      // var yAxisLeft = d3.axisLeft().scale(y).ticks(4)\n      // Add the y-axis to the left\n\n      svg.append(\"svg:g\").attr(\"class\", \"y_axis\").attr(\"stroke-opacity\", 0.5).attr(\"stroke-dasharray\", \"2,2\").attr(\"transform\", `translate(${marging.left},${marging.top})`).call(y_axis);\n      svg.selectAll(\".y_axis .tick text\").attr(\"transform\", `translate(-25,10)`);\n      svg.selectAll(\".x_axis .tick text\").attr(\"transform\", `translate(0,10)`);\n      svg.selectAll(\".tick text\").attr(\"x\", 4).attr(\"dy\", -4); // Add the line by appending an svg:path element with the data line we created above\n      // do this AFTER the axes above so that the line is above the tick-lines\n\n      svg.append(\"svg:path\").attr(\"d\", line(data));\n    }\n\n    get_data();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    width: svg_width,\n    height: svg_height,\n    className: \"d3_test\",\n    ref: d3Container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 12\n    }\n  });\n} //\n//\n//\n//\n//\n// export default function D3Test(props){\n//     const d3Container = useRef(null);\n//\n//     const width = 900\n//     const height = 300\n//     const marging = {top:10, left:30, right:10,bottom:20}\n//     console.log(width + marging.top)\n//     const svg_width = width + marging.left + marging.right\n//     const svg_height = height + marging.bottom + marging.top\n//\n//     useEffect(()=>{\n//         async function get_data() {\n//             var data = await axios.get(\"http://localhost:5000/sensors_data\").then(response => response.data)\n//\n//\n//\n//\n//             var values = []\n//             var values_list = []\n//             var date = []\n//             var size = 0\n//\n//             console.log(data)\n//             // for (var device in data) {\n//             //     // console.log(device)\n//             //     for (var uri in data[device]) {\n//             //         // console.log(uri)\n//             //         values.push({id:uri, values:[]})\n//             //         for (var sample in data[device][uri]) {\n//             //             values[0][\"values\"].append({\n//             //\n//             //                 value :data[device][uri][sample][0],\n//             //                 value_unit : data[device][uri][sample][1],\n//             //                 date: new Date(data[device][uri][sample][2])\n//             //\n//             //             })\n//             //             size = values.push(data[device][uri][sample])\n//             //             values_list.push(data[device][uri][sample][0])\n//             //             date.push(data[device][uri][sample][2])\n//             //\n//             //         }\n//             //     }\n//             // }\n//             //\n//             //             for (var device in data){\n//             //     // console.log(device)\n//             //     for (var uri in data[device]){\n//             //         // console.log(uri)\n//             //         for (var sample in data[device][uri]){\n//             //             // console.log(sample)\n//             //             // console.log(data[device][uri][sample])\n//             //             size = values.push(data[device][uri][sample])\n//             //             values_list.push(data[device][uri][sample][0])\n//             //             date.push(data[device][uri][sample][2])\n//             //         }\n//             //     }\n//             // }\n//\n//             var date_extr = d3.extent(date)\n//             const first_key = Object.keys(data)[0]\n//\n//             var val_extr_dict = data[first_key][\"values\"].shift()\n//             var val_extr = [val_extr_dict.val_min, val_extr_dict.val_max]\n//             console.log(\"coucou\")\n//             console.log(new Date(data[first_key][\"values\"][data[first_key][\"values\"].length-1][2]*1000))\n//             var date_deb = new Date(data[first_key][\"values\"][0][\"date\"]*1000)\n//             var date_fin = new Date(data[first_key][\"values\"][data[first_key][\"values\"].length-1][\"date\"]*1000)\n//             console.log(date_fin,date_deb)\n//             console.log(val_extr)\n//             console.log(data)\n//             // var val_min = val_extr[0]\n//             // var val_max = val_extr[1]\n//             // console.log(val_extr)\n//             const svg = d3.select(d3Container.current).attr(\"viewbox\",[0, 0, width- (marging.right + marging.left), height-(marging.bottom + marging.top)]).attr(\"width\",width).attr(\"height\",height)\n//\n//             var y_scale = d3.scaleLinear().domain(val_extr).nice().range([marging[\"top\"],height-(marging.bottom + marging.top)])\n//\n//             var y_axis = d3.axisRight().scale(y_scale).ticks(15).tickSize(width)\n//\n//             var x_scale = d3.scaleTime().domain([date_deb,date_fin]).nice().range([marging[\"left\"], width-marging[\"right\"]])\n//\n//             var x_axis = d3.axisBottom().scale(x_scale)\n//\n//             // svg.selectAll(\"circle\").data(y_scale.ticks())\n//             //     .join(\"line\")\n//             //     .attr(\"x1\",150)\n//             //     .attr(\"x2\",250)\n//             //     .attr(\"y1\",d=>y_scale(d))\n//             //     .attr(\"y2\",d=>y_scale(d))\n//             //     .attr(\"stroke\",\"black\")\n//\n//             svg.append(\"g\")\n//                 .attr(\"class\",\"y_axis\")\n//                 .attr(\"stroke-opacity\",0.5)\n//                 .attr(\"stroke-dasharray\",\"2,2\")\n//                 .attr(\"transform\",`translate(${marging.left},${marging.top})`).call(y_axis)\n//             svg.append(\"g\")\n//                 .attr(\"transform\", `translate(${marging.left},${height - marging.bottom})`)\n//                 .attr(\"class\",\"x_axis\")\n//                 .call(x_axis)\n//             svg.selectAll(\".tick text\")\n//                 .attr(\"x\", 4).attr(\"dy\", -4);\n//             svg.selectAll(\".y_axis .tick text\").attr(\"transform\",`translate(-25,10)`)\n//             svg.selectAll(\".x_axis .tick text\").attr(\"transform\",`translate(0,10)`)\n//\n//             // console.log(dict_data)\n//             const line = d3.line().x(function (d){return x_scale(d[\"date\"])}).y(function (d){return y_scale(d[\"value\"])})\n//             console.log()\n//             svg.selectAll(\"lines\").data([data[first_key].values]).enter().append(\"path\").attr(\"d\",line).attr(\"stroke\",\"black\")\n//                 // .append(\"g\").append(\"path\").attr(\"d\", function(d){return line(d.values)}).attr(\"stroke\",\"black\")\n//\n//         }\n//         get_data()\n//     }, [])\n//\n//     return <svg width={svg_width} height={svg_height}\n//         className=\"d3_test\"\n//\n//         ref={d3Container}\n//     />\n// }","map":{"version":3,"sources":["/app/src/components/d3component_testfield.js"],"names":["React","useEffect","useRef","useState","d3","axios","log","D3Test","props","d3Container","width","height","marging","top","left","right","bottom","console","svg_width","svg_height","get_data","data","get","then","response","values","values_list","date","size","date_extr","extent","first_key","Object","keys","val_extr_dict","shift","val_extr","val_min","val_max","Date","length","date_deb","date_fin","m","x","scaleLinear","domain","range","y","line","d","i","svg","select","current","append","attr","w","h","y_scale","nice","y_axis","axisRight","scale","ticks","tickSize","x_scale","scaleTime","x_axis","axisBottom","call","selectAll"],"mappings":"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AAO,CAACC,GAAI,GAJhE,EAIoEyD,IAJpE,CAIyET,MAJzE;AAKAT,MAAAA,GAAG,CAACmB,SAAJ,CAAc,oBAAd,EAAoCf,IAApC,CAAyC,WAAzC,EAAuD,mBAAvD;AACAJ,MAAAA,GAAG,CAACmB,SAAJ,CAAc,oBAAd,EAAoCf,IAApC,CAAyC,WAAzC,EAAuD,iBAAvD;AAEAJ,MAAAA,GAAG,CAACmB,SAAJ,CAAc,YAAd,EACKf,IADL,CACU,GADV,EACe,CADf,EACkBA,IADlB,CACuB,IADvB,EAC6B,CAAC,CAD9B,EA9HsB,CAiItB;AACA;;AACAJ,MAAAA,GAAG,CAACG,MAAJ,CAAW,UAAX,EAAuBC,IAAvB,CAA4B,GAA5B,EAAiCP,IAAI,CAAC5B,IAAD,CAArC;AACH;;AACDD,IAAAA,QAAQ;AACX,GAxIQ,EAwIN,EAxIM,CAAT;AA0IA,sBAAO;AAAK,IAAA,KAAK,EAAEF,SAAZ;AAAuB,IAAA,MAAM,EAAEC,UAA/B;AACK,IAAA,SAAS,EAAC,SADf;AAGK,IAAA,GAAG,EAAEV,WAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAKH,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport * as d3 from \"d3\";\nimport * as axios from \"axios\";\nimport log from \"d3-scale/src/log\";\n\n\n\n\n\n\nexport default function D3Test(props){\n    const d3Container = useRef(null);\n\n    const width = 900\n    const height = 300\n    const marging = {top:10, left:30, right:10,bottom:20}\n    console.log(width + marging.top)\n    const svg_width = width + marging.left + marging.right\n    const svg_height = height + marging.bottom + marging.top\n\n    useEffect(()=>{\n        /* implementation heavily influenced by http://bl.ocks.org/1166403 */\n        async function get_data() {\n            var data = await axios.get(\"http://localhost:5000/sensors_data\").then(response => response.data)\n\n\n            var values = []\n            var values_list = []\n            var date = []\n            var size = 0\n\n            console.log(data)\n            // for (var device in data) {\n            //     // console.log(device)\n            //     for (var uri in data[device]) {\n            //         // console.log(uri)\n            //         values.push({id:uri, values:[]})\n            //         for (var sample in data[device][uri]) {\n            //             values[0][\"values\"].append({\n            //\n            //                 value :data[device][uri][sample][0],\n            //                 value_unit : data[device][uri][sample][1],\n            //                 date: new Date(data[device][uri][sample][2])\n            //\n            //             })\n            //             size = values.push(data[device][uri][sample])\n            //             values_list.push(data[device][uri][sample][0])\n            //             date.push(data[device][uri][sample][2])\n            //\n            //         }\n            //     }\n            // }\n            //\n            //             for (var device in data){\n            //     // console.log(device)\n            //     for (var uri in data[device]){\n            //         // console.log(uri)\n            //         for (var sample in data[device][uri]){\n            //             // console.log(sample)\n            //             // console.log(data[device][uri][sample])\n            //             size = values.push(data[device][uri][sample])\n            //             values_list.push(data[device][uri][sample][0])\n            //             date.push(data[device][uri][sample][2])\n            //         }\n            //     }\n            // }\n\n            var date_extr = d3.extent(date)\n            const first_key = Object.keys(data)[0]\n\n            var val_extr_dict = data[first_key][\"values\"].shift()\n            var val_extr = [val_extr_dict.val_min, val_extr_dict.val_max]\n            console.log(\"coucou\")\n            console.log(new Date(data[first_key][\"values\"][data[first_key][\"values\"].length - 1][2] * 1000))\n            var date_deb = new Date(data[first_key][\"values\"][0][\"date\"] * 1000)\n            var date_fin = new Date(data[first_key][\"values\"][data[first_key][\"values\"].length - 1][\"date\"] * 1000)\n            console.log(date_fin, date_deb)\n            console.log(val_extr)\n            console.log(data)\n            // var val_min = val_extr[0]\n            // var val_max = val_extr[1]\n            // console.log(val_extr)\n            // define dimensions of graph\n            var m = [80, 80, 80, 80]; // margins\n            // var w = 1000 - m[1] - m[3]; // width\n            // var h = 400 - m[0] - m[2]; // height\n\n            // create a simple data array that we'll plot with a line (this array represents only the Y values, X will just be the index location)\n            var data = [3, 6, 2, 7, 5, 2, 0, 3, 8, 9, 2, 5, 9, 3, 6, 3, 6, 2, 7, 5, 2, 1, 3, 8, 9, 2, 5, 9, 2, 7];\n\n            // X scale will fit all values from data[] within pixels 0-w\n            var x = d3.scaleLinear().domain([0, data.length]).range([0, width]);\n            // Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)\n            var y = d3.scaleLinear().domain([0, 10]).range([height, 0]);\n            // automatically determining max range can work something like this\n            // var y = d3.scale.linear().domain([0, d3.max(data)]).range([h, 0]);\n\n            // create a line function that can convert data[] into x and y points\n            var line = d3.line()\n                // assign the X function to plot our line as we wish\n                .x(function (d, i) {\n                    // verbose logging to show what's actually being done\n                    console.log('Plotting X value for data point: ' + d + ' using index: ' + i + ' to be at: ' + x(i) + ' using our xScale.');\n                    // return the X coordinate where we want to plot this datapoint\n                    return x(i);\n                })\n                .y(function (d) {\n                    // verbose logging to show what's actually being done\n                    console.log('Plotting Y value for data point: ' + d + ' to be at: ' + y(d) + \" using our yScale.\");\n                    // return the Y coordinate where we want to plot this datapoint\n                    return y(d);\n                })\n            const svg = d3.select(d3Container.current).append(\"svg\")\n                // Add an SVG element with the desired dimensions and margin.\n                .attr(\"width\", w + m[1] + m[3])\n                .attr(\"height\", h + m[0] + m[2])\n                .append(\"svg:g\")\n                .attr(\"transform\", \"translate(\" + m[3] + \",\" + m[0] + \")\");\n\n            // create yAxis\n            // var xAxis = d3.axisBottom().scale(x).tickSize(-h)\n            var y_scale = d3.scaleLinear().domain(val_extr).nice().range([marging[\"top\"], height - (marging.bottom + marging.top)])\n\n            var y_axis = d3.axisRight().scale(y_scale).ticks(15).tickSize(width)\n\n            var x_scale = d3.scaleTime().domain([date_deb, date_fin]).nice().range([marging[\"left\"], width - marging[\"right\"]])\n\n            var x_axis = d3.axisBottom().scale(x_scale)\n            // Add the x-axis.\n\n\n            svg.append(\"svg:g\")\n                .attr(\"transform\", `translate(${marging.left},${height - marging.bottom})`)\n                .attr(\"class\", \"x_axis\")\n                .call(x_axis);\n\n\n            // create left yAxis\n            // var yAxisLeft = d3.axisLeft().scale(y).ticks(4)\n            // Add the y-axis to the left\n            svg.append(\"svg:g\")\n                .attr(\"class\", \"y_axis\")\n                .attr(\"stroke-opacity\", 0.5)\n                .attr(\"stroke-dasharray\", \"2,2\")\n                .attr(\"transform\", `translate(${marging.left},${marging.top})`).call(y_axis)\n            svg.selectAll(\".y_axis .tick text\").attr(\"transform\", `translate(-25,10)`)\n            svg.selectAll(\".x_axis .tick text\").attr(\"transform\", `translate(0,10)`)\n\n            svg.selectAll(\".tick text\")\n                .attr(\"x\", 4).attr(\"dy\", -4);\n\n            // Add the line by appending an svg:path element with the data line we created above\n            // do this AFTER the axes above so that the line is above the tick-lines\n            svg.append(\"svg:path\").attr(\"d\", line(data));\n        }\n        get_data()\n    }, [])\n\n    return <svg width={svg_width} height={svg_height}\n                className=\"d3_test\"\n\n                ref={d3Container}\n    />\n}\n//\n//\n//\n//\n//\n// export default function D3Test(props){\n//     const d3Container = useRef(null);\n//\n//     const width = 900\n//     const height = 300\n//     const marging = {top:10, left:30, right:10,bottom:20}\n//     console.log(width + marging.top)\n//     const svg_width = width + marging.left + marging.right\n//     const svg_height = height + marging.bottom + marging.top\n//\n//     useEffect(()=>{\n//         async function get_data() {\n//             var data = await axios.get(\"http://localhost:5000/sensors_data\").then(response => response.data)\n//\n//\n//\n//\n//             var values = []\n//             var values_list = []\n//             var date = []\n//             var size = 0\n//\n//             console.log(data)\n//             // for (var device in data) {\n//             //     // console.log(device)\n//             //     for (var uri in data[device]) {\n//             //         // console.log(uri)\n//             //         values.push({id:uri, values:[]})\n//             //         for (var sample in data[device][uri]) {\n//             //             values[0][\"values\"].append({\n//             //\n//             //                 value :data[device][uri][sample][0],\n//             //                 value_unit : data[device][uri][sample][1],\n//             //                 date: new Date(data[device][uri][sample][2])\n//             //\n//             //             })\n//             //             size = values.push(data[device][uri][sample])\n//             //             values_list.push(data[device][uri][sample][0])\n//             //             date.push(data[device][uri][sample][2])\n//             //\n//             //         }\n//             //     }\n//             // }\n//             //\n//             //             for (var device in data){\n//             //     // console.log(device)\n//             //     for (var uri in data[device]){\n//             //         // console.log(uri)\n//             //         for (var sample in data[device][uri]){\n//             //             // console.log(sample)\n//             //             // console.log(data[device][uri][sample])\n//             //             size = values.push(data[device][uri][sample])\n//             //             values_list.push(data[device][uri][sample][0])\n//             //             date.push(data[device][uri][sample][2])\n//             //         }\n//             //     }\n//             // }\n//\n//             var date_extr = d3.extent(date)\n//             const first_key = Object.keys(data)[0]\n//\n//             var val_extr_dict = data[first_key][\"values\"].shift()\n//             var val_extr = [val_extr_dict.val_min, val_extr_dict.val_max]\n//             console.log(\"coucou\")\n//             console.log(new Date(data[first_key][\"values\"][data[first_key][\"values\"].length-1][2]*1000))\n//             var date_deb = new Date(data[first_key][\"values\"][0][\"date\"]*1000)\n//             var date_fin = new Date(data[first_key][\"values\"][data[first_key][\"values\"].length-1][\"date\"]*1000)\n//             console.log(date_fin,date_deb)\n//             console.log(val_extr)\n//             console.log(data)\n//             // var val_min = val_extr[0]\n//             // var val_max = val_extr[1]\n//             // console.log(val_extr)\n//             const svg = d3.select(d3Container.current).attr(\"viewbox\",[0, 0, width- (marging.right + marging.left), height-(marging.bottom + marging.top)]).attr(\"width\",width).attr(\"height\",height)\n//\n//             var y_scale = d3.scaleLinear().domain(val_extr).nice().range([marging[\"top\"],height-(marging.bottom + marging.top)])\n//\n//             var y_axis = d3.axisRight().scale(y_scale).ticks(15).tickSize(width)\n//\n//             var x_scale = d3.scaleTime().domain([date_deb,date_fin]).nice().range([marging[\"left\"], width-marging[\"right\"]])\n//\n//             var x_axis = d3.axisBottom().scale(x_scale)\n//\n//             // svg.selectAll(\"circle\").data(y_scale.ticks())\n//             //     .join(\"line\")\n//             //     .attr(\"x1\",150)\n//             //     .attr(\"x2\",250)\n//             //     .attr(\"y1\",d=>y_scale(d))\n//             //     .attr(\"y2\",d=>y_scale(d))\n//             //     .attr(\"stroke\",\"black\")\n//\n//             svg.append(\"g\")\n//                 .attr(\"class\",\"y_axis\")\n//                 .attr(\"stroke-opacity\",0.5)\n//                 .attr(\"stroke-dasharray\",\"2,2\")\n//                 .attr(\"transform\",`translate(${marging.left},${marging.top})`).call(y_axis)\n//             svg.append(\"g\")\n//                 .attr(\"transform\", `translate(${marging.left},${height - marging.bottom})`)\n//                 .attr(\"class\",\"x_axis\")\n//                 .call(x_axis)\n//             svg.selectAll(\".tick text\")\n//                 .attr(\"x\", 4).attr(\"dy\", -4);\n//             svg.selectAll(\".y_axis .tick text\").attr(\"transform\",`translate(-25,10)`)\n//             svg.selectAll(\".x_axis .tick text\").attr(\"transform\",`translate(0,10)`)\n//\n//             // console.log(dict_data)\n//             const line = d3.line().x(function (d){return x_scale(d[\"date\"])}).y(function (d){return y_scale(d[\"value\"])})\n//             console.log()\n//             svg.selectAll(\"lines\").data([data[first_key].values]).enter().append(\"path\").attr(\"d\",line).attr(\"stroke\",\"black\")\n//                 // .append(\"g\").append(\"path\").attr(\"d\", function(d){return line(d.values)}).attr(\"stroke\",\"black\")\n//\n//         }\n//         get_data()\n//     }, [])\n//\n//     return <svg width={svg_width} height={svg_height}\n//         className=\"d3_test\"\n//\n//         ref={d3Container}\n//     />\n// }"]},"metadata":{},"sourceType":"module"}